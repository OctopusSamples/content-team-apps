name: 'Pipeline Frontend'
description: Builds the pipeline generator frontend web app
inputs:
  octopus_server_url:  
    required: true
  octopus_api_token:  
    required: true
  run_number:  
    required: true
  github_token:  
    required: true
on:
  push:
  workflow_dispatch:

runs:
  using: "composite"

  steps:
    - uses: actions/checkout@v1

    - uses: nelonoel/branch-name@v1.0.1

    - name: Install Octopus Deploy CLI
      uses: OctopusDeploy/install-octocli@v1
      with:
        version: 7.4.3124

    - name: Creating a prerelease from the branch
      run: |
        PRERELEASE="${{ env.BRANCH_NAME != 'main' && format('-{0}', env.BRANCH_NAME) || '' }}"
        echo PRERELEASE=${PRERELEASE////-} >> $GITHUB_ENV
        CHANNEL="${{ env.BRANCH_NAME != 'main' && 'Feature Branch' || 'Default' }}"
        echo CHANNEL=${CHANNEL} >> $GITHUB_ENV
      shell: bash

    - name: Packages
      run: yarn install
      shell: bash
      working-directory: js/pipeline-generator

    - name: Build
      run: yarn build
      shell: bash
      working-directory: js/pipeline-generator

    - name: Install CycloneDX
      run: npm install -g @cyclonedx/bom
      shell: bash
      working-directory: js/pipeline-generator

    - name: Generate SBOM
      run: cyclonedx-bom
      shell: bash
      working-directory: js/pipeline-generator

    - name: Create zip
      run: cd build; zip -r ../pipeline-builder-github-frontend.0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}.zip .
      shell: bash
      working-directory: js/pipeline-generator

    - name: Create zip
      run: zip pipeline-builder-github-frontend-sbom.0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}.zip bom.xml
      shell: bash
      working-directory: js/pipeline-generator

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        tag_name: pipeline-backend.0.1.${{ inputs.run_number }}
        release_name: Pipeline Frontend 0.1.${{ inputs.run_number }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: js/pipeline-generator/pipeline-builder-github-frontend.0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}.zip
        asset_name: pipeline-builder-github-frontend.0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}.zip
        asset_content_type: application/zip

    - name: Push Package
      run: >
        octo push --package pipeline-builder-github-frontend.0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}.zip
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
      shell: bash
      working-directory: js/pipeline-generator

    - name: Push SBOM Package
      run: >
        octo push --package pipeline-builder-github-frontend-sbom.0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}.zip
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
      shell: bash
      working-directory: js/pipeline-generator

    - name: Trigger deployment Jenkins Pipelines
      if: ${{ env.BRANCH_NAME == 'main' }}
      run: >
        octo create-release
        --project "Jenkins Pipelines Generator Frontend"
        --deployTo "Development"
        --waitForDeployment
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
        --defaultPackageVersion 0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}
        --version 0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}
        --ignoreExisting
        --channel "Default"
      shell: bash

    - name: Trigger deployment Jenkins Pipelines Feature Branch
      if: ${{ env.BRANCH_NAME != 'main' }}
      run: >
        octo create-release
        --project "Jenkins Pipelines Generator Feature Branch"
        --deployTo "Development"
        --waitForDeployment
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
        --defaultPackageVersion 0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}
        --version 0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}
        --ignoreExisting
        --channel "Feature Branches"
      shell: bash

    - name: Trigger deployment Jenkins Pipelines Security env
      if: ${{ env.BRANCH_NAME == 'main' }}
      run: >
        octo promote-release
        --project "Jenkins Pipelines Generator Frontend"
        --from "Development"
        --deployTo "Development (Security)"
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
        --latestSuccessful
      shell: bash

    - name: Trigger deployment Github Actions
      if: ${{ env.BRANCH_NAME == 'main' }}
      run: >
        octo create-release
        --project "GitHub Action Workflow Generator Frontend"
        --deployTo "Development"
        --waitForDeployment
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
        --defaultPackageVersion 0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}
        --version 0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}
        --ignoreExisting
        --channel "default"
      shell: bash

    - name: Trigger deployment Github Actions Security env
      if: ${{ env.BRANCH_NAME == 'main' }}
      run: >
        octo promote-release
        --project "GitHub Action Workflow Generator Frontend"
        --from "Development"
        --deployTo "Development (Security)"
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
        --latestSuccessful
      shell: bash