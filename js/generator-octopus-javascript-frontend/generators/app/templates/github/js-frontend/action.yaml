name: Docker Build and Push
description: Build the JavaScript frontend
inputs:
  image_tag:
    description: 'The ECR Docker image tag'
    required: true
  cypress_image_tag:
    description: 'The ECR Docker cypress worker image tag'
    required: true
  aws_access_key:
    description: 'The AWS access key'
    required: true
  aws_secret_key:
    description: 'The AWS secret key'
    required: true
  aws_region:
    description: 'The AWS region'
    required: true
  octopus_server:
    description: 'Octopus cloud URL'
    required: true
  octopus_apikey:
    description: 'Octopus API key'
    required: true
  octopus_space_id:
    description: 'The ID of the app builder space'
    required: true
  run_number:
    required: true
    description: The GitHub Actions Workflow run number
  octopus_space:
    description: 'The Octopus space name'
    required: true
  github_repo:
    description: 'The github repo'
    required: true
  github_token:
    description: 'The github token'
    required: true

runs:
  using: "composite"
  steps:
    - name: Clone code repo
      uses: actions/checkout@v2

    - uses: actions/setup-node@v3
      with:
        node-version: 14
        cache: 'npm'
        cache-dependency-path: js/frontend/yarn.lock

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ inputs.aws_access_key }}
        aws-secret-access-key: ${{ inputs.aws_secret_key }}
        aws-region: ${{ inputs.aws_region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: 5.x

    - name: Install Octopus CLI
      uses: OctopusDeploy/install-octopus-cli-action@v1.1.1
      with:
        version: latest

    - id: determine_version
      name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.15
      with:
        additionalArguments: /overrideconfig mode=Mainline

    - name: Install modules
      run: yarn install
      shell: bash
      working-directory: js/frontend

    - name: Instance CycloneDX
      run: npm install --global @cyclonedx/cyclonedx-npm
      shell: bash

    # This step generates a Source Bill of Materials (SBOM) package that captures all the dependencies compiled
    # into the application.
    - name: Generate SBOM
      run: cyclonedx-npm --ignore-npm-errors --output-file bom.xml
      shell: bash
      working-directory: js/frontend

    # We capture the SBOM, which is found in the file bom.xml, as a versioned ZIP package.
    - name: Build SBOM package
      run: >
        octo pack
        --id javascript-frontend-sbom
        --version ${{ steps.determine_version.outputs.semVer }}
        --format zip
        --include **/bom.xml
      shell: bash
      working-directory: js/frontend

    # The SBOM package is pushed to the Octopus built-in feed.
    - name: Push SBOM Package
      run: >
        octo push 
        --package javascript-frontend-sbom.${{ steps.determine_version.outputs.semVer }}.zip
        --server ${{ inputs.octopus_server }}
        --apiKey ${{ inputs.octopus_apikey }}
        --space "${{ inputs.octopus_space }}"
        --overwrite-mode OverwriteExisting
      shell: bash
      working-directory: js/frontend

    - name: Build App
      run: yarn run build
      shell: bash
      working-directory: js/frontend

    - name: Build and deploy serverless package
      run: |
        if [[ -z "${{ inputs.image_tag }}" ]]
        then
          zip -r octopus-frontend.${{ steps.determine_version.outputs.semVer }}.zip serverless.yaml build public/config.json.dot
          mvn deploy:deploy-file \
            --batch-mode \
            -Dfile=octopus-frontend.${{ steps.determine_version.outputs.semVer }}.zip \
            -Durl="https://${{ github.actor }}:${{ inputs.github_token }}@maven.pkg.github.com/${{ github.repository }}" \
            -DgroupId=com.octopus \
            -DartifactId=octopus-frontend \
            -Dversion=${{ steps.determine_version.outputs.semVer }} \
            -Dpackaging=zip
        fi
      shell: bash
      working-directory: js/frontend

    - name: Build image
      uses: mamezou-tech/buildpacks-action@master
      if: inputs.image_tag != ''
      with:
        image: '${{ inputs.image_tag }}'
        tag: '${{ steps.determine_version.outputs.semVer }}'
        path: 'js/frontend'
        builder: 'heroku/buildpacks:20'
        buildpacks: 'heroku/nodejs https://cnb-shim.herokuapp.com/v1/heroku-community/static'
        env: NODE_OPTIONS=--openssl-legacy-provider

    # The Docker image is built and pushed. It uses the same tag as the SBOM package version to allow us to match the
    # two packages in Octopus.
    - name: Build, tag, and push image to Amazon ECR
      run: |
        if [[ -n "${{ inputs.image_tag }}" ]]
        then
          docker push ${{ inputs.image_tag }}:${{ steps.determine_version.outputs.semVer }}
        fi
      shell: bash
      working-directory: js/frontend

    - name: Build and push static web package
      run: |
        if [[ -z "${{ inputs.image_tag }}" ]]
        then
          pushd build
          zip -r ../javascript-frontend.${{ steps.determine_version.outputs.semVer }}.zip .
          popd
          octo push \
            --package javascript-frontend.${{ steps.determine_version.outputs.semVer }}.zip \
            --server ${{ inputs.octopus_server }} \
            --apiKey ${{ inputs.octopus_apikey }} \
            --space "${{ inputs.octopus_space }}" \
            --overwrite-mode OverwriteExisting
        fi
      shell: bash
      working-directory: js/frontend

    # The Docker image used to run Cypress tests is built and pushed.
    # Note this is only done for the main branch. Unlike containers that are deployed by a step, container images
    # have their tags hard coded in a deployment process. There is no facility to define the specific tag
    # of a container image at release creation time. This means there is no facility to create a feature branch
    # version of a container image and test it in isolation as part of a deployment.
    - name: Build, tag, and push postman image to Amazon ECR
      if: ${{ env.BRANCH_NAME == 'main' }}
      run: |
        cd cypress
        docker build -t ${{ inputs.cypress_image_tag }} .
        docker push ${{ inputs.cypress_image_tag }}
      shell: bash
      working-directory: js

    - name: Install Cypress modules
      run: npm install
      shell: bash
      working-directory: js/cypress-frontend

    # End-to-end tests are performed with Cypress.
    - name: Build Cypress package
      run: >
        octo pack
        --id octopub-frontend-cypress
        --version ${{ steps.determine_version.outputs.semVer }}
        --format zip
        --outFolder ..
      shell: bash
      working-directory: js/cypress-frontend

    # The Cypress package is pushed to the Octopus built-in feed.
    - name: Push Cypress Package
      run: >
        octo push 
        --package octopub-frontend-cypress.${{ steps.determine_version.outputs.semVer }}.zip
        --server ${{ inputs.octopus_server }}
        --apiKey ${{ inputs.octopus_apikey }}
        --space "${{ inputs.octopus_space }}"
        --overwrite-mode OverwriteExisting
      shell: bash
      working-directory: js

    - name: Create a release
      if: ${{ env.BRANCH_NAME == 'main' }}
      run: >
        octo create-release
        --project "Frontend WebApp"
        --server ${{ inputs.octopus_server }}
        --apiKey ${{ inputs.octopus_apikey }}
        --space "${{ inputs.octopus_space }}"
        --package frontend:${{ steps.determine_version.outputs.semVer }}
        --package javascript-frontend-sbom:${{ steps.determine_version.outputs.semVer }}
        --version ${{ steps.determine_version.outputs.semVer }}
        --ignoreExisting
        --deploymentTimeout 00:30:00
      shell: bash

    - name: Create a release
      if: ${{ env.BRANCH_NAME != 'main' && env.BRANCH_NAME != 'app-builder-update' }}
      run: >
        octo create-release
        --project "Frontend Feature Branch WebApp"
        --server ${{ inputs.octopus_server }}
        --apiKey ${{ inputs.octopus_apikey }}
        --space "${{ inputs.octopus_space }}"
        --package frontend:${{ steps.determine_version.outputs.semVer }}
        --package javascript-frontend-sbom:${{ steps.determine_version.outputs.semVer }}
        --deployTo "Development"
        --waitForDeployment
        --version ${{ steps.determine_version.outputs.semVer }}
        --ignoreExisting
        --deploymentTimeout 00:30:00
      shell: bash