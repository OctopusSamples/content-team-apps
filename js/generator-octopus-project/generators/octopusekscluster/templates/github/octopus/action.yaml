name: Terraform Apply
description: Create the Octopus resources
inputs:
  project_name:
    description: |
      The name used to identify this project. It is used for the directory holding project terraform files, and
      the filename of the GitHub Actions workflow file.
    required: true
  octopus_server:
    description: 'Octopus cloud URL'
    required: true
  octopus_apikey:
    description: 'Octopus API key'
    required: true
  octopus_space_id:
    description: 'The ID of the Octopus space'
    required: true
  octopus_project_name:
    description: 'The name of the Octopus project'
    required: true
  octopus_project_description:
    description: 'The description of the Octopus project'
    required: true
  octopus_development_environment_id:
    description: 'The development environment id'
    required: true
  octopus_production_environment_id:
    description: 'The production environment id'
    required: true
  octopus_development_security_environment_id:
    description: 'The development security environment id'
    required: true
  octopus_production_security_environment_id:
    description: 'The production security environment id'
    required: true
  octopus_lifecycle_id:
    description: 'The project lifecycle ID'
    required: true
  octopus_project_group_name:
    description: 'The name of the Octopus project group'
    required: true
  existing_project_group:
    description: 'Whether to create a new project group, or use an existing one'
    required: true
  octopus_dockerhub_feed_id:
    description: 'The dockerhub feed ID'
    required: true

# AWS inputs

  aws_access_key:
    description: 'AWS Access Key'
    required: true
  aws_secret_key:
    description: 'AWS Secret Key'
    required: true
  octopus_aws_development_account_id:
    description: 'The development AWS account id'
    required: true
  octopus_aws_production_account_id:
    description: 'The production AWS account id'
    required: true
  aws_region:
    description: 'The AWS region'
    required: true

runs:
  using: "composite"
  steps:
    - name: Clone code repo
      uses: actions/checkout@v2

    - uses: nelonoel/branch-name@v1.0.1

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Install Octopus CLI
      uses: OctopusDeploy/install-octopus-cli-action@v1.1.1
      with:
        version: latest

    - name: Install AWS CLI
      uses: unfor19/install-aws-cli-action@v1

    - id: repository_owner_lower
      uses: ASzc/change-string-case-action@v2
      with:
        string: ${{ github.repository_owner }}

    - id: repository_name_lower
      uses: ASzc/change-string-case-action@v2
      with:
        string: ${{ github.event.repository.name }}

    # Terraform does not support variables in backend configuration. However, a tool like App Builder can't know
    # beforehand which S3 bucket will hold the state, as each deployment requires a unique bucket.
    # To work around this the envsubst tool is used to rewrite the file defining the Terraform backend based on
    # environment variables. This allows us to generate a unique backend configuration with each deployment.
    - name: Create Terraform state S3 bucket
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: |
        # Check to see if the bucket exists
        aws s3api head-bucket \
            --bucket ${{ steps.repository_owner_lower.outputs.lowercase }}-${{ steps.repository_name_lower.outputs.lowercase }}-${{ inputs.project_name }} \
            --region ${{ inputs.aws_region }} 2>/dev/null
        # If not, create it
        if [[ $? -ne 0 ]]; then        
          aws s3 mb \
            s3://${{ steps.repository_owner_lower.outputs.lowercase }}-${{ steps.repository_name_lower.outputs.lowercase }}-${{ inputs.project_name }} \
            --region ${{ inputs.aws_region }}
          echo "Sleeping to ensure bucket is available"
          sleep 60
        fi
      shell: "bash -l {0}" # Allow commands to fail by removing the default "-e" argument

    # The Terraform state is stored in a cloud bucket which must be substituted into the backend configuration.
    # This is because backend config con not have variables.
    # See https://github.com/hashicorp/terraform/issues/13022
    - uses: danielr1996/envsubst-action@1.1.0
      env:
        GITHUB_OWNER: ${{ steps.repository_owner_lower.outputs.lowercase }}
        GITHUB_REPO: ${{ steps.repository_name_lower.outputs.lowercase }}
        PROJECT_NAME: ${{ inputs.project_name }}
        TERRAFORM_BUCKET_REGION: ${{ inputs.aws_region }}
      with:
        input: terraform/${{ inputs.project_name }}/backend_aws.tf
        output: terraform/${{ inputs.project_name }}/backend_aws.tf

    # There is a bug with the Terraform provider that means step package references are incorrectly
    # associated with new steps. The easiest fix is to delete the projects before recreating them.
    # Note that you will likely want to remove this step if you intend to update projects via Terraform, as this
    # deletes project releases.
    - name: Delete existing projects
      run: |
        declare -a arr=("${{ inputs.octopus_project_name }}")
        
        for i in "${arr[@]}"
        do
          # See https://stackoverflow.com/a/32980082/157605 for details on the --data-urlencode option
          ID=$(curl -G --data-urlencode "name=$i" --silent -H "X-Octopus-ApiKey: ${{ inputs.octopus_apikey }}" ${{ inputs.octopus_server }}/api/${{ inputs.octopus_space_id }}/projects | jq -r ".Items[0].Id")
          if [[ -n "$ID" && "$ID" != "null" ]]; then
            echo "Deleting project $i"
            curl --silent -X DELETE -H "X-Octopus-ApiKey: ${{ inputs.octopus_apikey }}" ${{ inputs.octopus_server }}/api/${{ inputs.octopus_space_id }}/projects/${ID}
          fi
        done
      shell: bash

    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: terraform init
      working-directory: terraform/${{ inputs.project_name }}
      shell: bash

    - name: Terraform Apply
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: |
        terraform apply \
          -input=false \
          -auto-approve \
          -var="project_name=${{ inputs.project_name }}" \
          -var="octopus_server=${{ inputs.octopus_server }}" \
          -var="octopus_apikey=${{ inputs.octopus_apikey }}" \
          -var="octopus_project_name=${{ inputs.octopus_project_name }}" \
          -var="octopus_project_description=${{ inputs.octopus_project_description }}" \
          -var="octopus_lifecycle_id=${{ inputs.octopus_lifecycle_id }}" \
          -var="octopus_development_environment_id=${{ inputs.octopus_development_environment_id }}" \
          -var="octopus_production_environment_id=${{ inputs.octopus_production_environment_id }}" \
          -var="octopus_development_security_environment_id=${{ inputs.octopus_development_security_environment_id }}" \
          -var="octopus_production_security_environment_id=${{ inputs.octopus_production_security_environment_id }}" \
          -var="octopus_space_id=${{ inputs.octopus_space_id }}" \
          -var="octopus_project_group_name=${{ inputs.octopus_project_group_name }}" \
          -var="existing_project_group=${{ inputs.existing_project_group }}" \
          -var="aws_region=${{ inputs.aws_region }}" \
          -var="octopus_aws_development_account_id=${{ inputs.octopus_aws_development_account_id }}" \
          -var="octopus_aws_production_account_id=${{ inputs.octopus_aws_production_account_id }}" \
          -var="github_repo=${{ github.event.repository.name }}" \
          -var="github_owner=${{ github.repository_owner }}" \
          -var="octopus_dockerhub_feed_id=${{ inputs.octopus_dockerhub_feed_id }}"

      working-directory: terraform/${{ inputs.project_name }}
      shell: bash