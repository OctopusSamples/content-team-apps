name: Terraform Destroy
description: Destroy the Octopus environments and lifecycles
inputs:
  project_name:
    description: |
      The name of the project. This is used when building the Terraform state files, and typically matches the
      directory name where the template project files are stored. 
    required: true
  project_directory_name:
    description: |
      The directory holding the template project files. This is typically the same as the project_name. But, for
      resources that can be deployed multiple times (for instance multiple Docker registries, VMs etc), you can
      call this action file multiple times with different values for project_name, while leaving project_directory_name
      to point to the shared template project files. The end result is the workflow file has two steps, both calling this
      same action file, where project_directory_name is the same, but project_name is different.
    required: true
  octopus_server:
    description: 'Octopus cloud URL'
    required: true
  octopus_apikey:
    description: 'Octopus API key'
    required: true
  octopus_space_id:
    description: 'The ID of the Octopus space'
    required: true
  channel_project_name:
    description: 'The project name to add the channel rule to'
    required: true
  step_name:
    description: 'The step name to attach the version rule to'
    required: true

# AWS inputs

  aws_access_key:
    description: 'AWS Access Key'
    required: true
  aws_secret_key:
    description: 'AWS Secret Key'
    required: true
  aws_region:
    description: 'The AWS region'
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Install AWS CLI
      uses: unfor19/install-aws-cli-action@v1

    - id: repository_owner_lower
      uses: ASzc/change-string-case-action@v2
      with:
        string: ${{ github.repository_owner }}

    - id: repository_name_lower
      uses: ASzc/change-string-case-action@v2
      with:
        string: ${{ github.event.repository.name }}

    # Need some extra logic to get the name of the deleted branch.
    # See https://stackoverflow.com/questions/62281418/in-github-actions-is-it-possible-to-access-the-name-of-a-deleted-branch.
    - id: fixed_branch_name
      run: |
        BRANCH_NAME=${{ github.event.ref }}
        BRANCH_NAME=${BRANCH_NAME#refs/heads/}
        FIXED_BRANCH_NAME=${BRANCH_NAME//[^a-zA-Z0-9-]/-} 
        echo "fixedbranch=$FIXED_BRANCH_NAME" >> $GITHUB_ENV
      shell: bash
      
    # Terraform creates and tracks environments, channels, and lifecycles. It does not track any targets created in the environments.
    # Before the environments can be deleted, any targets in them must be deleted.  
    - name: Delete targets
      run: |
        # Find the list of targets
        TARGETS=$(curl --silent --header "X-Octopus-ApiKey: ${{ inputs.octopus_apikey }}" "${{ inputs.octopus_server }}/api/${{ inputs.octopus_space_id }}/machines?skip=0&take=1000")
        # Find the list of environments
        ENVIRONMENTS=$(curl --silent --header "X-Octopus-ApiKey: ${{ inputs.octopus_apikey }}" "${{ inputs.octopus_server }}/api/${{ inputs.octopus_space_id }}/environments?skip=0&take=1000")
        # Find the environment ID
        ENVIRONMENTID=$(echo $ENVIRONMENTS | jq -r '.Items[] | select(.Name == "${{ env.fixedbranch }}").Id')
        # List the environment
        echo "Found the following environments: $ENVIRONMENTID"
        # Find the target ID
        TARGETIDS=$(echo $TARGETS | jq -r ".Items[] | select(any(.EnvironmentIds[]; . == \"$ENVIRONMENTID\")).Id")
        # List the targets
        echo "Deleting the following targets: $TARGETIDS"
        # Delete the targets
        if [[ ! -z "$TARGETIDS" ]]
        then
          echo $TARGETIDS | xargs -i curl --silent -X DELETE --header "X-Octopus-ApiKey: ${{ inputs.octopus_apikey }}" ${{ inputs.octopus_server }}/api/${{ inputs.octopus_space_id }}/machines/{}   
        fi
      shell: bash
      
    # Terraform creates and tracks environments, channels, and lifecycles. It does not track releases in channels.
    # Before the channels can be deleted, any releases in them must be deleted.  
    - name: Delete releases
      run: |
        # Find the list of projects
        PROJECTS=$(curl --silent --header "X-Octopus-ApiKey: ${{ inputs.octopus_apikey }}" "${{ inputs.octopus_server }}/api/${{ inputs.octopus_space_id }}/projects/all")
        # Find the project ID
        PROJECTID=$(echo $PROJECTS | jq -r '.[] | select(.Name == "${{ inputs.channel_project_name }}").Id')
        echo "Found project: $PROJECTID"
        # Find the list of channels
        CHANNELS=$(curl --silent --header "X-Octopus-ApiKey: ${{ inputs.octopus_apikey }}" "${{ inputs.octopus_server }}/api/${{ inputs.octopus_space_id }}/channels?skip=0&take=1000")
        # Find the channel IDs
        CHANNELIDS=$(echo $CHANNELS | jq -r ".Items[] | select((.ProjectId == \"$PROJECTID\") and (.Name == \"Feature branch ${{ env.fixedbranch }}\")).Id")
        echo "Found channels: $CHANNELIDS"
        # Find releases
        RELEASES=$(curl --silent --header "X-Octopus-ApiKey: ${{ inputs.octopus_apikey }}" "${{ inputs.octopus_server }}/api/${{ inputs.octopus_space_id }}/projects/$PROJECTID/releases")
        # Match releases to channels and delete them
        if [[ ! -z "$CHANNELIDS" && ! -z "$RELEASES" ]]
        then
          for CHANNEL in $CHANNELIDS
          do
            RELEASEIDS=$(echo $RELEASES | jq -r ".Items[] | select(.ChannelId == \"$CHANNEL\").Id")            
            for RELEASE in $RELEASEIDS
            do
              echo "Deleting release $RELEASE in channel $CHANNEL"
              curl --silent -X DELETE --header "X-Octopus-ApiKey: ${{ inputs.octopus_apikey }}" ${{ inputs.octopus_server }}/api/${{ inputs.octopus_space_id }}/releases/$RELEASE
            done
          done
        fi
      shell: bash

    # The Terraform state is stored in a cloud bucket which must be substituted into the backend configuration.
    # This is because backend config con not have variables.
    # See https://github.com/hashicorp/terraform/issues/13022
    - uses: danielr1996/envsubst-action@1.1.0
      env:
        GITHUB_OWNER: ${{ steps.repository_owner_lower.outputs.lowercase }}
        GITHUB_REPO: ${{ steps.repository_name_lower.outputs.lowercase }}
        PROJECT_NAME: ${{ inputs.project_name }}
        TERRAFORM_BUCKET_REGION: ${{ inputs.aws_region }}
        FEATURE_BRANCH: ${{ env.fixedbranch }}
      with:
        input: terraform/${{ inputs.project_directory_name }}/backend_aws.tf
        output: terraform/${{ inputs.project_directory_name }}/backend_aws.tf

    - name: Show Backend
      run: cat backend_aws.tf
      working-directory: terraform/${{ inputs.project_directory_name }}
      shell: bash

    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: terraform init
      working-directory: terraform/${{ inputs.project_directory_name }}
      shell: bash

    - name: Terraform Destroy
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: |
        terraform destroy \
          -input=false \
          -auto-approve \
          -var="octopus_server=${{ inputs.octopus_server }}" \
          -var="octopus_apikey=${{ inputs.octopus_apikey }}" \
          -var="octopus_space_id=${{ inputs.octopus_space_id }}" \
          -var="featurebranch_name=${{ env.fixedbranch }}" \
          -var="channel_project_name=${{ inputs.channel_project_name }}" \
          -var="step_name=${{ inputs.step_name }}"
      working-directory: terraform/${{ inputs.project_directory_name }}
      shell: bash
      
    - name: Delete Terraform state S3 bucket
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: |
        aws s3 rm s3://${{ steps.repository_name_lower.outputs.lowercase }}-${{ inputs.project_name }}-${{ env.fixedbranch }} \
          --recursive \
          --region ${{ inputs.aws_region }}
        aws s3api delete-bucket \
          --bucket ${{ steps.repository_name_lower.outputs.lowercase }}-${{ inputs.project_name }}-${{ env.fixedbranch }} \
          --region ${{ inputs.aws_region }}       
      shell: bash
