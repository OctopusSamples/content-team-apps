name: Terraform Apply
description: Create a Kubernetes deployment project
inputs:
  project_name:
    description: |
      The name of the project. This is used when building the Terraform state files, and typically matches the
      directory name where the template project files are stored.
    required: true
  project_directory_name:
    description: |
      The directory holding the template project files. This is typically the same as the project_name. But, for
      resources that can be deployed multiple times (for instance multiple Docker registries, VMs etc), you can
      call this action file multiple times with different values for project_name, while leaving project_directory_name
      to point to the shared template project files. The end result is the workflow file has two steps, both calling this
      same action file, where project_directory_name is the same, but project_name is different.
    required: true
  octopus_server:
    description: 'Octopus cloud URL'
    required: true
  octopus_apikey:
    description: 'Octopus API key'
    required: true
  octopus_space_id:
    description: 'The ID of the app builder space'
    required: true
  octopus_dockerhub_feed_id:
    description: 'The ID of Dockerhub feed'
    required: true
  octopus_application_lifecycle_id:
    description: 'The ID of Application lifecycle'
    required: true
  octopus_simple_lifecycle_id:
    description: 'The ID of the simple lifecycle'
    required: true
  octopus_production_only_lifecycle_id:
    description: 'The ID of Production Only lifecycle'
    required: true
  octopus_development_app_environment_id:
    description: 'The ID of Development App environment'
    required: true
  octopus_development_security_environment_id:
    description: 'The ID of Development Security environment'
    required: true
  octopus_production_app_environment_id:
    description: 'The ID of Production App environment'
    required: true
  octopus_production_security_environment_id:
    description: 'The ID of Production Security environment'
    required: true
  aws_access_key:
    description: 'The AWS access key'
    required: true
  aws_secret_key:
    description: 'The AWS secret key'
    required: true
  aws_region:
    description: 'The AWS region'
    required: true
  github_package_pat:
    description: 'The GitHub Personal Access Token used to access package feeds'
    required: true
  namespace_prefix:
    description: 'The prefix of the namespace used to hold the microservice demo. For example, you may set this to you own name to create an isolated deployment in a shared cluster.'
    required: true
runs:
  using: "composite"
  steps:
    - name: Clone code repo
      uses: actions/checkout@v3

    - uses: nelonoel/branch-name@v1.0.1

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Install Octopus CLI
      uses: OctopusDeploy/install-octopus-cli-action@v1
      with:
        version: latest

    - name: Install AWS CLI
      uses: unfor19/install-aws-cli-action@v1

    - id: repository_owner_lower
      uses: ASzc/change-string-case-action@v2
      with:
        string: ${{ github.repository_owner }}

    - id: repository_name_lower
      uses: ASzc/change-string-case-action@v2
      with:
        string: ${{ github.event.repository.name }}

    # Terraform does not support variables in backend configuration. However, a tool like App Builder can't know
    # beforehand which S3 bucket will hold the state, as each deployment requires a unique bucket.
    # To work around this the envsubst tool is used to rewrite the file defining the Terraform backend based on
    # environment variables. This allows us to generate a unique backend configuration with each deployment.
    - id: create_s3_bucket
      name: Create Terraform state S3 bucket
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: |
        # Make sure the strings are not too long, as s3 buckets can only be 63 chars in length
        REPO_OWNER="${{ steps.repository_owner_lower.outputs.lowercase }}"
        TRIMMED_REPO_OWNER=${REPO_OWNER:0:10}
        REPO_NAME="${{ steps.repository_name_lower.outputs.lowercase }}"
        TRIMMED_REPO_NAME=${REPO_NAME:0:20}

        echo "TRIMMED_REPO_OWNER=${TRIMMED_REPO_OWNER}" >> $GITHUB_OUTPUT
        echo "TRIMMED_REPO_NAME=${TRIMMED_REPO_NAME}" >> $GITHUB_OUTPUT

        # Check to see if the bucket exists
        aws s3api head-bucket \
            --bucket ${TRIMMED_REPO_OWNER}-${TRIMMED_REPO_NAME}-${{ inputs.project_name }} \
            --region ${{ inputs.aws_region }} 2>/dev/null
        # If not, create it
        if [[ $? -ne 0 ]]; then        
          aws s3 mb \
            s3://${TRIMMED_REPO_OWNER}-${TRIMMED_REPO_NAME}-${{ inputs.project_name }} \
            --region ${{ inputs.aws_region }}
          echo "Sleeping to ensure bucket is available"
          sleep 60
        fi
      shell: "bash -l {0}" # Allow commands to fail by removing the default "-e" argument

    # The Terraform state is stored in a cloud bucket which must be substituted into the backend configuration.
    # This is because backend config con not have variables.
    # See https://github.com/hashicorp/terraform/issues/13022
    - uses: danielr1996/envsubst-action@1.1.0
      env:
        GITHUB_OWNER: ${{ steps.create_s3_bucket.outputs.TRIMMED_REPO_OWNER }}
        GITHUB_REPO: ${{ steps.create_s3_bucket.outputs.TRIMMED_REPO_NAME }}
        PROJECT_NAME: ${{ inputs.project_name }}
        TERRAFORM_BUCKET_REGION: ${{ inputs.aws_region }}
      with:
        input: terraform/${{ inputs.project_directory_name }}/backend_aws.tf
        output: terraform/${{ inputs.project_directory_name }}/backend_aws.tf

    # There is a bug with the Terraform provider that means step package references are incorrectly
    # associated with new steps. The easiest fix is to delete the projects before recreating them.
    # Note that you will likely want to remove this step if you intend to update projects via Terraform, as this
    # deletes project releases.
    - name: Delete existing projects
      run: |
        declare -a arr=("Complete%20Deployment" "Frontend")

        for i in "${arr[@]}"
        do
          ID=$(curl --silent -H "X-Octopus-ApiKey: ${{ inputs.octopus_apikey }}" ${{ inputs.octopus_server }}/api/${{ inputs.octopus_space_id }}/projects?name=$i | jq -r ".Items[0].Id")
          if [[ -n "$ID" && "$ID" != "null" ]]; then
            echo "Deleting project $i"
            curl --silent -X DELETE -H "X-Octopus-ApiKey: ${{ inputs.octopus_apikey }}" ${{ inputs.octopus_server }}/api/${{ inputs.octopus_space_id }}/projects/${ID}
          fi
        done
      shell: bash

    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: terraform init
      working-directory: terraform/${{ inputs.project_directory_name }}
      shell: bash

    - name: Terraform Apply
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: |
        terraform apply \
        -auto-approve \
        -var="octopus_server=${{ inputs.octopus_server }}" \
        -var="octopus_apikey=${{ inputs.octopus_apikey }}" \
        -var="octopus_space_id=${{ inputs.octopus_space_id }}" \
        -var="github_package_pat=${{ inputs.github_package_pat }}" \
        -var="octopus_dockerhub_feed_id=${{ inputs.octopus_dockerhub_feed_id }}" \
        -var="octopus_application_lifecycle_id=${{ inputs.octopus_application_lifecycle_id }}" \
        -var="octopus_simple_lifecycle_id=${{ inputs.octopus_simple_lifecycle_id }}" \
        -var="octopus_production_only_lifecycle_id=${{ inputs.octopus_production_only_lifecycle_id }}" \
        -var="octopus_development_app_environment_id=${{ inputs.octopus_development_app_environment_id }}" \
        -var="octopus_development_security_environment_id=${{ inputs.octopus_development_security_environment_id }}" \
        -var="octopus_production_app_environment_id=${{ inputs.octopus_production_app_environment_id }}" \
        -var="octopus_production_security_environment_id=${{ inputs.octopus_production_security_environment_id }}" \
        -var="github_owner=${{ github.repository_owner }}" \
        -var="namespace_prefix=${{ inputs.namespace_prefix }}"
      working-directory: terraform/${{ inputs.project_directory_name }}
      shell: bash
