name: Terraform Apply
description: Create an ECR instance to hold Docker images
inputs:
  octopus_server:
    description: 'Octopus cloud URL'
    required: true
  octopus_apikey:
    description: 'Octopus API key'
    required: true
  octopus_space_id:
    description: 'The ID of the app builder space'
    required: true
  aws_access_key:
    description: 'The AWS access key'
    required: true
  aws_secret_key:
    description: 'The AWS secret key'
    required: true
  aws_region:
    description: 'The AWS region'
    required: true
  aws_ecr_repository_name:
    description: 'The name of the ECR repository'
    required: true
  terraform_bucket_suffix:
    description: 'The unique suffix applied to the Terraform state S3 bucket'
    required: true
  terraform_bucket_region:
    description: 'The region in which the Terraform state bucket resides'
    required: true
  github_repo:
    description: 'The github repo'
    required: true
  github_repo_owner:
    description: 'The github repo owner'
    required: true
  platform:
    description: 'The platform'
    required: true

outputs:
  aws_ecr_repository_url:
    description: 'The ECR URL'
    value: ${{ steps.aws_ecr_repository_url.outputs.stdout }}
  aws_ecr_repository_name:
    description: 'The ECR Name'
    value: ${{ steps.aws_ecr_repository_name.outputs.stdout }}
  ecr_feed_id:
    description: 'The ECR Feed ID'
    value: ${{ steps.ecr_feed_id.outputs.stdout }}

runs:
  using: "composite"
  steps:
    - name: Clone code repo
      uses: actions/checkout@v2

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Install AWS CLI
      uses: unfor19/install-aws-cli-action@v1

    - name: Create Terraform state S3 bucket
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: |
        # Check to see if the bucket exists
        aws s3api head-bucket --bucket app-builder-${{ inputs.terraform_bucket_suffix }} --region ${{ inputs.terraform_bucket_region }} 2>/dev/null
        # If not, create it
        if [[ $? -ne 0 ]]; then        
          aws s3 mb s3://app-builder-${{ inputs.terraform_bucket_suffix }} --region ${{ inputs.terraform_bucket_region }}
          echo "Sleeping to ensure bucket is available"
          sleep 60
          if [[ $? -ne 0 ]]; then
            echo "AppBuilder-Infrastructure-S3Failed The build script failed to create an S3 bucket to hold the Terraform state. See https://github.com/OctopusSamples/content-team-apps/wiki/Error-Codes#appbuilder-infrastructure-s3failed for more information."
            exit 1
          fi
        fi
      shell: "bash -l {0}" # Allow commands to fail by removing the default "-e" argument

    - uses: danielr1996/envsubst-action@1.1.0
      env:
        TERRAFORM_BUCKET_SUFFIX: ${{ inputs.terraform_bucket_suffix }}
        TERRAFORM_BUCKET_REGION: ${{ inputs.terraform_bucket_region }}
      with:
        input: terraform/aws-ecr/backend.tf
        output: terraform/aws-ecr/backend.tf

    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: terraform init
      working-directory: terraform/aws-ecr
      shell: bash

    - name: Terraform Apply
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: |
        terraform apply -auto-approve -var="platform=${{ inputs.platform }}" -var="octopus_server=${{ inputs.octopus_server }}" -var="octopus_apikey=${{ inputs.octopus_apikey }}" -var="octopus_space_id=${{ inputs.octopus_space_id }}" -var="aws_access_key=${{ inputs.aws_access_key }}" -var="aws_secret_key=${{ inputs.aws_secret_key }}" -var="aws_region=${{ inputs.aws_region }}" -var="aws_region=${{ inputs.aws_region }}" -var="aws_ecr_repository_name=${{ inputs.aws_ecr_repository_name }}" -var="github_repo_owner=${{ inputs.github_repo_owner }}"
        
        if [[ $? -ne 0 ]]; then
          echo "AppBuilder-Infrastructure-ECRFailed The build script failed to create an ECR instance. See https://github.com/OctopusSamples/content-team-apps/wiki/Error-Codes#appbuilder-infrastructure-ecrfailed for more information."
          exit 1
        fi
      working-directory: terraform/aws-ecr
      shell: bash

    - name: Terraform Collect ECR URL
      id: aws_ecr_repository_url
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: terraform output -raw aws_ecr_repository_url
      working-directory: terraform/aws-ecr
      shell: bash

    - name: Terraform Collect ECR Feed ID
      id: ecr_feed_id
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: terraform output -raw ecr_feed_id
      working-directory: terraform/aws-ecr
      shell: bash

    - name: Terraform Collect ECR URL
      id: aws_ecr_repository_name
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: terraform output -raw aws_ecr_repository_name
      working-directory: terraform/aws-ecr
      shell: bash
