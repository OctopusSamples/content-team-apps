name: Docker Build and Push
description: Build the Java microservice
inputs:
  image_tag:
    description: 'The ECR Docker image tag'
    required: true
  aws_access_key:
    description: 'The AWS access key'
    required: true
  aws_secret_key:
    description: 'The AWS secret key'
    required: true
  aws_region:
    description: 'The AWS region'
    required: true
  octopus_server:
    description: 'Octopus cloud URL'
    required: true
  octopus_apikey:
    description: 'Octopus API key'
    required: true
  octopus_space_id:
    description: 'The ID of the app builder space'
    required: true
  run_number:
    required: true
    description: The GitHub Actions Workflow run number
  octopus_space:
    description: 'The Octopus space name'
    required: true

runs:
  using: "composite"
  steps:
    - name: Clone code repo
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws_access_key }}
        aws-secret-access-key: ${{ inputs.aws_secret_key }}
        aws-region: ${{ inputs.aws_region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: 5.x

    - name: Install Octopus CLI
      uses: OctopusDeploy/install-octopus-cli-action@v1.1.1
      with:
        version: latest

    - id: determine_version
      name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        additionalArguments: /overrideconfig mode=Mainline

    - name: Set up JDK 1.17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: adopt

    - uses: DeLaGuardo/setup-graalvm@4.0
      with:
        graalvm: '22.0.0.2'
        java: 'java17'
        arch: 'amd64'

    - name: Install native-image component
      run: gu install native-image
      shell: bash

    - name: Checkstyle
      run: mvn --batch-mode checkstyle:check
      shell: bash
      working-directory: java

    - name: Install modules
      run: mvn --batch-mode install -DskipTests
      shell: bash
      working-directory: java

    - name: Test Backend
      run: mvn --batch-mode test
      shell: bash
      working-directory: java/quarkus-microservice

    - name: Test Shared Library
      run: mvn --batch-mode test
      shell: bash
      working-directory: java/microservice-utils

    - name: Build with Maven
      run: mvn --batch-mode package --file pom.xml -DskipTests
      shell: bash
      working-directory: java/quarkus-microservice

    - name: Generate JaCoCo Badges
      uses: cicirello/jacoco-badge-generator@v2
      with:
        generate-branches-badge: true
        jacoco-csv-file: java/quarkus-microservice/target/jacoco-report/jacoco.csv
        coverage-badge-filename: quarkus-microservice.svg
        branches-badge-filename: quarkus-microservice-branches.svg

    - name: Generate JaCoCo Badges for Shared Library
      uses: cicirello/jacoco-badge-generator@v2
      with:
        generate-branches-badge: true
        jacoco-csv-file: java/microservice-utils/target/site/jacoco/jacoco.csv
        coverage-badge-filename: microservice-utils.svg
        branches-badge-filename: microservice-utils-branches.svg

    - name: Commit the badges (if they changed)
      run: |
        if [[ `git diff --exit-code .github/badges` ]]; then
          git config --global user.name 'Matthew Casperson'
          git config --global user.email 'mcasperson@users.noreply.github.com'
          git add .github/badges/*
          git commit -m "Autogenerated JaCoCo coverage badge"
          git push || true
        fi
      shell: bash

    # This step generates a Source Bill of Materials (SBOM) package that captures all the dependencies compiled
    # into the application.
    - name: Generate SBOM
      run: mvn cyclonedx:makeAggregateBom -DskipTests --no-transfer-progress --batch-mode
      shell: bash
      working-directory: java

    # We capture the SBOM, which is found in the file bom.xml, as a versioned ZIP package.
    - name: Build SBOM package
      run: >
        octo pack
        --id quarkus-microservice-sbom
        --version ${{ steps.determine_version.outputs.semVer }}
        --format zip
        --include **/bom.xml
      shell: bash
      working-directory: java/quarkus-microservice

    # The SBOM package is pushed to the Octopus built-in feed.
    - name: Push SBOM Package
      run: >
        octo push --package quarkus-microservice-sbom.${{ steps.determine_version.outputs.semVer }}.zip
        --server ${{ inputs.octopus_server }}
        --apiKey ${{ inputs.octopus_apikey }}
        --space "${{ inputs.octopus_space }}"
      shell: bash
      working-directory: java/quarkus-microservice

    # The Docker image is built and pushed. It uses the same tag as the SBOM package version to allow us to match the
    # two packages in Octopus.
    - name: Build, tag, and push image to Amazon ECR
      run: |
        docker build -f src/main/docker/Dockerfile.legacy-jar -t ${{ inputs.image_tag }}:${{ steps.determine_version.outputs.semVer }} .
        docker push ${{ inputs.image_tag }}
      shell: bash
      working-directory: java/quarkus-microservice