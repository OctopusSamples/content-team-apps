name: Docker Build and Push
description: Build the Java microservice
inputs:
  image_tag:
    description: 'The ECR Docker products service image tag'
    required: true
  postman_image_tag:
    description: 'The ECR Docker postman worker image tag'
    required: true
  aws_access_key:
    description: 'The AWS access key'
    required: true
  aws_secret_key:
    description: 'The AWS secret key'
    required: true
  aws_region:
    description: 'The AWS region'
    required: true
  octopus_server:
    description: 'Octopus cloud URL'
    required: true
  octopus_apikey:
    description: 'Octopus API key'
    required: true
  octopus_space_id:
    description: 'The ID of the app builder space'
    required: true
  run_number:
    required: true
    description: The GitHub Actions Workflow run number
  octopus_space:
    description: 'The Octopus space name'
    required: true
  github_repo:
    description: 'The github repo'
    required: true
  github_token:
    description: 'The github token'
    required: true

runs:
  using: "composite"
  steps:
    - name: Clone code repo
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ inputs.aws_access_key }}
        aws-secret-access-key: ${{ inputs.aws_secret_key }}
        aws-region: ${{ inputs.aws_region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: 5.x

    - name: Install Octopus CLI
      uses: OctopusDeploy/install-octopus-cli-action@v1.1.1
      with:
        version: latest

    - id: determine_version
      name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.15
      with:
        additionalArguments: /overrideconfig mode=Mainline

    - name: Set up JDK 1.17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: adopt
        cache: 'maven'

    - uses: DeLaGuardo/setup-graalvm@4.0
      with:
        graalvm: '22.1.0'
        java: 'java17'
        arch: 'amd64'

    - name: Install native-image component
      run: gu install native-image
      shell: bash

    - name: Checkstyle
      run: ./mvnw --batch-mode checkstyle:check
      shell: bash
      working-directory: java

    - name: Install modules
      run: ./mvnw --batch-mode install -DskipTests
      shell: bash
      working-directory: java

    - name: Test Backend
      run: ./mvnw --batch-mode test
      shell: bash
      working-directory: java/products-microservice

    - name: Test Shared Library
      run: ./mvnw --batch-mode test
      shell: bash
      working-directory: java/microservice-utils

    - name: Build with Maven
      run: ./mvnw --batch-mode package --file pom.xml -DskipTests
      shell: bash
      working-directory: java/products-microservice

    - name: Generate JaCoCo Badges
      uses: cicirello/jacoco-badge-generator@v2
      with:
        generate-branches-badge: true
        jacoco-csv-file: java/products-microservice/target/jacoco-report/jacoco.csv
        coverage-badge-filename: products-microservice.svg
        branches-badge-filename: products-microservice-branches.svg

    - name: Generate JaCoCo Badges for Shared Library
      uses: cicirello/jacoco-badge-generator@v2
      with:
        generate-branches-badge: true
        jacoco-csv-file: java/microservice-utils/target/site/jacoco/jacoco.csv
        coverage-badge-filename: microservice-utils.svg
        branches-badge-filename: microservice-utils-branches.svg

    - name: Update resources
      if: ${{ env.BRANCH_NAME == 'main' }}
      uses: test-room-7/action-update-file@v1.6.0
      with:
        file-path: |
          .github/badges/microservice-utils.svg
          .github/badges/microservice-utils-branches.svg
        commit-msg: Update badges
        github-token: ${{ inputs.github_token }}

    # This step generates a Source Bill of Materials (SBOM) package that captures all the dependencies compiled
    # into the application.
    - name: Generate SBOM
      run: ./mvnw cyclonedx:makeAggregateBom -DskipTests --no-transfer-progress --batch-mode
      shell: bash
      working-directory: java

    # We capture the SBOM, which is found in the file bom.xml, as a versioned ZIP package.
    - name: Build SBOM package
      run: >
        octo pack
        --id products-microservice-sbom
        --version ${{ steps.determine_version.outputs.semVer }}
        --format zip
        --include **/bom.xml
      shell: bash
      working-directory: java/products-microservice

    # The SBOM package is pushed to the Octopus built-in feed.
    - name: Push SBOM Package
      run: >
        octo push 
        --package products-microservice-sbom.${{ steps.determine_version.outputs.semVer }}.zip
        --server ${{ inputs.octopus_server }}
        --apiKey ${{ inputs.octopus_apikey }}
        --space "${{ inputs.octopus_space }}"
        --overwrite-mode OverwriteExisting
      shell: bash
      working-directory: java/products-microservice

    # Integration tests are performed with Postman using an exported collection.
    - name: Build Postman package
      run: >
        octo pack
        --id products-microservice-postman
        --version ${{ steps.determine_version.outputs.semVer }}
        --format zip
        --include test.json
        --basePath postman-products
      shell: bash
      working-directory: java

    # The Postman package is pushed to the Octopus built-in feed.
    - name: Push Postman Package
      run: >
        octo push 
        --package products-microservice-postman.${{ steps.determine_version.outputs.semVer }}.zip
        --server ${{ inputs.octopus_server }}
        --apiKey ${{ inputs.octopus_apikey }}
        --space "${{ inputs.octopus_space }}"
        --overwrite-mode OverwriteExisting
      shell: bash
      working-directory: java

    # The Docker image used to run Postman tests is built and pushed.
    # Note this is only done for the main branch. Unlike containers that are deployed by a step, container images
    # have their tags hard coded in a deployment process. There is no facility to define the specific tag
    # of a container image at release creation time. This means there is no facility to create a feature branch
    # version of a container image and test it in isolation as part of a deployment.
    - name: Build, tag, and push postman image to Amazon ECR
      if: ${{ env.BRANCH_NAME == 'main' }}
      run: |
        cd postman
        docker build -t ${{ inputs.postman_image_tag }} .
        docker push ${{ inputs.postman_image_tag }}
      shell: bash
      working-directory: java

    # The Docker image is built and pushed. It uses the same tag as the SBOM package version to allow us to match the
    # two packages in Octopus.
    - name: Build, tag, and push image to Amazon ECR
      run: |
        if [[ -n "${{ inputs.image_tag }}" ]]
        then
          docker build -f src/main/docker/Dockerfile.legacy-jar -t ${{ inputs.image_tag }}:${{ steps.determine_version.outputs.semVer }} .
          docker push ${{ inputs.image_tag }}:${{ steps.determine_version.outputs.semVer }}
        fi
      shell: bash
      working-directory: java/products-microservice

    - name: Build and deploy serverless package
      run: |
        if [[ -z "${{ inputs.image_tag }}" ]]
        then
          ./mvnw --batch-mode package -P "lambda,native" -DskipTests -Dquarkus.profile=faas
          zip products-service.${{ steps.determine_version.outputs.semVer }}.zip serverless.yaml target/function.zip
          mvn deploy:deploy-file \
            --batch-mode \
            -Dfile=products-service.${{ steps.determine_version.outputs.semVer }}.zip \
            -Durl="https://${{ github.actor }}:${{ inputs.github_token }}@maven.pkg.github.com/${{ github.repository }}" \
            -DgroupId=com.octopus \
            -DartifactId=products-service \
            -Dversion=${{ steps.determine_version.outputs.semVer }} \
            -Dpackaging=zip
        fi
      shell: bash
      working-directory: java/products-microservice

    - name: Build and push lambda package
      run: |
        if [[ -z "${{ inputs.image_tag }}" ]]
        then
          mv target/function.zip products-microservice-lambda.${{ steps.determine_version.outputs.semVer }}.zip
          octo push \
            --package products-microservice-lambda.${{ steps.determine_version.outputs.semVer }}.zip \
            --server ${{ inputs.octopus_server }} \
            --apiKey ${{ inputs.octopus_apikey }} \
            --space "${{ inputs.octopus_space }}" \
            --overwrite-mode OverwriteExisting
        fi
      shell: bash
      working-directory: java/products-microservice

    # The default package version below is used to allow the dumb-reverse-proxy to
    # be deployed without DockerHub credentials.
    - name: Create a release
      if: ${{ env.BRANCH_NAME == 'main' }}
      run: >
        octo create-release
        --project "Backend Service"
        --server ${{ inputs.octopus_server }}
        --apiKey ${{ inputs.octopus_apikey }}
        --space "${{ inputs.octopus_space }}"
        --defaultPackageVersion "0.1.57"
        --package "Backend Service:products:${{ steps.determine_version.outputs.semVer }}"
        --package "Postman Integration Test:products-microservice-postman:${{ steps.determine_version.outputs.semVer }}"
        --package "products-microservice-sbom:${{ steps.determine_version.outputs.semVer }}"
        --version ${{ steps.determine_version.outputs.semVer }}
        --ignoreExisting
        --deploymentTimeout 00:30:00
      shell: bash

    - name: Create a release
      if: ${{ env.BRANCH_NAME != 'main' && env.BRANCH_NAME != 'app-builder-update' }}
      run: >
        octo create-release
        --project "Backend Feature Branch Service"
        --server ${{ inputs.octopus_server }}
        --apiKey ${{ inputs.octopus_apikey }}
        --space "${{ inputs.octopus_space }}"
        --defaultPackageVersion "0.1.57"
        --package "Backend Service:products:${{ steps.determine_version.outputs.semVer }}"
        --package "Postman Integration Test:products-microservice-postman:${{ steps.determine_version.outputs.semVer }}"
        --package "products-microservice-sbom:${{ steps.determine_version.outputs.semVer }}"
        --deployTo "Development"
        --waitForDeployment
        --version ${{ steps.determine_version.outputs.semVer }}
        --ignoreExisting
        --deploymentTimeout 00:30:00
      shell: bash