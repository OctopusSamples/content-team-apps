name: Docker Build and Push
description: Build and publish the Docker image
inputs:
  octopus_server:
    description: 'Octopus cloud URL'
    required: true
  octopus_apikey:
    description: 'Octopus API key'
    required: true
  octopus_space:
    description: 'The Octopus space name'
    required: true
  aws_access_key:
    description: 'The AWS access key'
    required: true
  aws_secret_key:
    description: 'The AWS secret key'
    required: true
  terraform_bucket_suffix:
    description: 'The unique suffix applied to the Terraform state S3 bucket'
    required: true
  terraform_bucket_region:
    description: 'The region in which the Terraform state bucket resides'
    required: true
  github_repo:
    description: 'The github repo'
    required: true
  github_repo_owner:
    description: 'The github repo owner'
    required: true

outputs:
  octopus_space_id:
    description: "The Octopus space ID"
    value: ${{ steps.octopus_space_id.outputs.stdout }}
  octopus_space_name:
    description: "The Octopus space name"
    value: ${{ steps.octopus_space_name.outputs.stdout }}

runs:
  using: "composite"
  steps:
    - name: Clone code repo
      uses: actions/checkout@v2

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Install AWS CLI
      uses: unfor19/install-aws-cli-action@v1

    # Allow for the possibility that the space already exists. This allows the GitHub repo to be deleted,
    # which in turn effectively means Terraform loses access to the backend state, and therefor "forgets"
    # that it created a space.
    - name: Check if space exists
      id: space_exists
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: |
        SPACE="${{ inputs.octopus_space }}"
        OWNER="${{ inputs.github_repo_owner }}"
        FULL_SPACE_NAME="${SPACE} ${OWNER}"
        SPACE_NAME=${FULL_SPACE_NAME:0:20}
        echo "Checking for ${SPACE_NAME}"
        EXISTS=$(curl --get --silent -H 'X-Octopus-ApiKey: ${{ inputs.octopus_apikey }}' --data-urlencode "partialName=${SPACE_NAME}" "${{ inputs.octopus_server }}/api/Spaces" | jq "any(.Items[] ; select(.Name == \"${SPACE_NAME}\"))")
        SPACE_ID=$(curl --get --silent -H 'X-Octopus-ApiKey: ${{ inputs.octopus_apikey }}' --data-urlencode "partialName=${SPACE_NAME}" "${{ inputs.octopus_server }}/api/Spaces" | jq -r ".Items[] | select(.Name == \"${SPACE_NAME}\") | .Id")
        SPACE_NAME=$(curl --get --silent -H 'X-Octopus-ApiKey: ${{ inputs.octopus_apikey }}' --data-urlencode "partialName=${SPACE_NAME}" "${{ inputs.octopus_server }}/api/Spaces" | jq -r ".Items[] | select(.Name == \"${SPACE_NAME}\") | .Name")
        echo "::set-output name=EXISTS::${EXISTS}"
        echo "::set-output name=SPACE_ID::${SPACE_ID}"
        echo "::set-output name=SPACE_NAME::${SPACE_NAME}"
      shell: bash

    # The Terraform state is stored in a S3 bucket. This bucket can't be created by Terraform, so we rely on the AWS
    # CLI tooling to create a unique bucket before Terraform is run.
    - name: Create Terraform state S3 bucket
      if: ${{ steps.space_exists.outputs.EXISTS == 'false' }}
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: |
        # Check to see if the bucket exists
        aws s3api head-bucket --bucket app-builder-${{ inputs.terraform_bucket_suffix }} --region ${{ inputs.terraform_bucket_region }} 2>/dev/null
        # If not, create it
        if [[ $? -ne 0 ]]; then        
          aws s3 mb s3://app-builder-${{ inputs.terraform_bucket_suffix }} --region ${{ inputs.terraform_bucket_region }}
          echo "Sleeping to ensure bucket is available"
          sleep 60
        fi
      shell: "bash -l {0}" # Allow commands to fail by removing the default "-e" argument

    # Terraform does not support variables in backend configuration. However, a tool like App Builder can't know
    # beforehand which S3 bucket will hold the state, as each deployment requires a unique bucket.
    # To work around this the envsubst tool is used to rewrite the file defining the Terraform backend based on
    # environment variables. This allows us to generate a unique backend configuration with each deployment.
    - uses: danielr1996/envsubst-action@1.1.0
      if: ${{ steps.space_exists.outputs.EXISTS == 'false' }}
      env:
        TERRAFORM_BUCKET_SUFFIX: ${{ inputs.terraform_bucket_suffix }}
        TERRAFORM_BUCKET_REGION: ${{ inputs.terraform_bucket_region }}
      with:
        input: terraform/shared-space/backend.tf
        output: terraform/shared-space/backend.tf

    - name: Terraform Init
      if: ${{ steps.space_exists.outputs.EXISTS == 'false' }}
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: terraform init
      working-directory: terraform/shared-space
      shell: bash

    - name: Terraform Apply
      if: ${{ steps.space_exists.outputs.EXISTS == 'false' }}
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: |
        terraform apply -auto-approve -var="octopus_server=${{ inputs.octopus_server }}" -var="octopus_apikey=${{ inputs.octopus_apikey }}" -var="octopus_space=${{ inputs.octopus_space }}" -var="github_repo=${{ inputs.github_repo }}" -var="github_repo_owner=${{ inputs.github_repo_owner }}"
        
        if [[ $? -ne 0 ]]; then
          echo "AppBuilder-Infrastructure-OctopusSpaceFailed The build script failed to create an Octopus space. See https://github.com/OctopusSamples/content-team-apps/wiki/Error-Codes#appbuilder-infrastructure-octopusspacefailed for more information."
          exit 1
        fi
      working-directory: terraform/shared-space
      shell: bash

    # We share the Terraform output variables between actions by saving the raw Terraform variable value to
    # GitHub Actions output inside a step with a unique ID. The composite step then saves the value
    # from this step's stdout as an output variable with the syntax ${{ steps.terraform_output.outputs.stdout }}.
    - name: Terraform Collect Output
      id: octopus_space_id
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: |
        if [[ "${{ steps.space_exists.outputs.EXISTS }}" == "false" ]]; then
          terraform output -raw octopus_space_id
        else
          echo "${{ steps.space_exists.outputs.SPACE_ID }}"
        fi
      working-directory: terraform/shared-space
      shell: bash

    - name: Terraform Collect Output
      id: octopus_space_name
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
      run: |
        if [[ "${{ steps.space_exists.outputs.EXISTS }}" == "false" ]]; then
          terraform output -raw octopus_space_name
        else
          echo "${{ steps.space_exists.outputs.SPACE_NAME }}"
        fi
      working-directory: terraform/shared-space
      shell: bash