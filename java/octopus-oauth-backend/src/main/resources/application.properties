# The HTTP server port
quarkus.http.port=10000
# Mock Lambda port
quarkus.lambda.mock-event-server.dev-port=10001
# Mock Lambda port
quarkus.lambda.mock-event-server.test-port=10002
# Bind to all interfaces
quarkus.http.host=0.0.0.0
# The logging level
quarkus.log.min-level=INFO
# The URL that the Octopus authorization server will open with the id token of the logged in user.
octopus.login.redirect=${OCTOPUS_LOGIN_REDIRECT:http://localhost:10000/oauth/octopus/response}
# The URL that this service will open with the ID token embedded in an encrypted cookie.
octopus.client.redirect=${OCTOPUS_REDIRECT:https://o9rot8lk3g.execute-api.us-west-1.amazonaws.com/Development/}
# The encryption key for the ID token cookie
octopus.encryption=${OCTOPUS_ENCRYPTION}
# The encryption salt for the ID token cookie
octopus.salt=${OCTOPUS_SALT}
# For testing a hard coded ID token can be returned instead of the one returned by the Octopus authorization server.
octopus.test.idToken=${OCTOPUS_TEST_ID_TOKEN:}
# Set to true to have the login endpoint redirect immediately to the web app again.
# This setting was added to allow the service to work while Octofront does not support custom redirect URLs.
# When disabled, the web app will complete the Octopus login like normal, only no login will be performed,
# there will be no ID token, and so the attempt to create a service account will fail.
# However, when disabled, you can still test the app builder all the way to the final step. It is only the final step
# where the ID token is required that will fail.
octopus.disable.login:${OCTOPUS_DISABLE_LOGIN:false}
# Allow the HTTP interface to be accessed from other domains
quarkus.http.cors=true
# Allow credentials like cookies
quarkus.http.cors.access-control-allow-credentials=true
# Trust all TLS certs when making outbound connections
quarkus.tls.trust-all=true
# https://github.com/oracle/graal/issues/3875
quarkus.native.additional-build-args=-J--add-exports=java.management/sun.management=ALL-UNNAMED
# The name of the lambda to execute. Can be "login" or "response".
quarkus.lambda.handler=${LAMBDA_HANDLER:login}