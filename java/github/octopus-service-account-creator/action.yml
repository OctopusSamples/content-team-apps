name: 'Octopus Service Account Creator'
description: Build and deploy the Octopus Service Account Creator
inputs:
  dockerhub_username:
    required: true
  dockerhub_password:
    required: true
  github_token:
    required: true
  octopus_server_url:
    required: true
  octopus_api_token:
    required: true
  run_number:
    required: true
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_password }}

    - uses: nelonoel/branch-name@v1.0.1

    - name: Install Octopus CLI
      uses: OctopusDeploy/install-octopus-cli-action@v1.1.1
      with:
        version: latest

    - name: Set up JDK 1.17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    - uses: DeLaGuardo/setup-graalvm@4.0
      with:
        graalvm: '22.0.0.2'
        java: 'java17'
        arch: 'amd64'

    - name: Install native-image component
      run: gu install native-image
      shell: bash

    - name: Checkstyle
      run: mvn --batch-mode checkstyle:check
      shell: bash
      working-directory: java

    - name: Install modules
      run: mvn --batch-mode install -DskipTests
      shell: bash
      working-directory: java

    - name: Update version
      run: mvn --batch-mode build-helper:parse-version versions:set -DnewVersion=0.1.${{ github.run_number }}
      shell: bash
      working-directory: java/octopus-service-account-creator

    - name: List dependencies
      run: mvn --batch-mode dependency:tree --no-transfer-progress
      shell: bash
      working-directory: java/octopus-service-account-creator

    - name: Build with Maven
      run: mvn --batch-mode package --file pom.xml -Pnative -Plambda -DskipTests -Dquarkus.profile=prod
      shell: bash
      working-directory: java/octopus-service-account-creator

#    - name: Test Backend
#      run: mvn --batch-mode test
#      env:
#        LAMBDA_HANDLER: login
#        GITHUB_REDIRECT: https://development.githubactionworkflows.com/oauth/github/code
#        GITHUB_CLIENT_ID: ${{ inputs.oauth_client_id }}
#        GITHUB_CLIENT_SECRET: ${{ inputs.oauth_client_secret }}
#        GITHUB_ENCRYPTION: 1234567890123456789012345678901234567890
#        GITHUB_SALT: 1234567890123456789012345678901234567890
#        GITHUB_LOGIN_REDIRECT: https://development.githubactionworkflows.com/
#      shell: bash
#      working-directory: java/octopus-service-account-creator
#
#    - name: Generate JaCoCo Badges
#      id: jacocoMod1
#      uses: cicirello/jacoco-badge-generator@v2
#      with:
#        generate-branches-badge: true
#        jacoco-csv-file: java/octopus-service-account-creator/target/site/jacoco/jacoco.csv
#        coverage-badge-filename: oauth.svg
#        branches-badge-filename: oauthbranches.svg
#
#    - name: Commit the badge (if it changed)
#      run: |
#        if [[ `git diff --exit-code .github/badges` ]]; then
#          git config --global user.name 'Matthew Casperson'
#          git config --global user.email 'mcasperson@users.noreply.github.com'
#          git add .github/badges/*
#          git commit -m "Autogenerated JaCoCo coverage badge"
#          git push || true
#        fi
#      shell: bash
#
#    - name: Test Common
#      run: mvn --batch-mode test
#      shell: bash
#      working-directory: java/pipeline-builder-utils

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        tag_name: octopus-service-account-creator.0.1.${{ inputs.run_number }}
        release_name: GitHub OAuth Proxy Release 0.1.${{ inputs.run_number }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: java/octopus-service-account-creator/target/octopus-service-account-creator-runner
        asset_name: octopus-service-account-creator-runner
        asset_content_type: application/octet-stream

    - name: Rename zip
      run: >
        mv octopus-service-account-creator/target/function.zip
        octopus-service-account-creator-lambda.0.1.${{ inputs.run_number }}.zip
      shell: bash
      working-directory: java

    - name: Push Package
      run: >
        octo push --package octopus-service-account-creator-lambda.0.1.${{ inputs.run_number }}.zip
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
      shell: bash
      working-directory: java

    - name: Generate SBOM
      run: mvn cyclonedx:makeAggregateBom -DskipTests --no-transfer-progress --batch-mode
      shell: bash
      working-directory: java

    - name: Build SBOM package
      run: >
        octo pack
        --id octopus-service-account-creator-lambda-sbom
        --version 0.1.${{ inputs.run_number }}
        --format zip
        --include **/bom.xml
      shell: bash
      working-directory: java

    - name: Push SBOM Package
      run: >
        octo push --package octopus-service-account-creator-lambda-sbom.0.1.${{ inputs.run_number }}.zip
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
      shell: bash
      working-directory: java

    - name: Generate Octopus Deploy build information
      uses: xo-energy/action-octopus-build-information@v1.1.2
      with:
        octopus_api_key: ${{ inputs.octopus_api_token }}
        octopus_project: Deploy Octopus Service Account Creator
        octopus_server: ${{ inputs.octopus_server_url }}
        octopus_space: Content Team
        push_version: 0.1.${{ inputs.run_number }}
        push_package_ids: octopus-service-account-creator-lambda
        push_overwrite_mode: OverwriteExisting
        output_path: octopus

    - name: Trigger deployment
      if: ${{ env.BRANCH_NAME == 'main' }}
      run: >
        octo create-release
        --project "Octopus Service Account Creator"
        --deployTo "Development"
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
        --waitForDeployment
        --deploymentTimeout 00:30:00
      shell: bash

    - name: Trigger deployment to security environment
      if: ${{ env.BRANCH_NAME == 'main' }}
      run: >
        octo promote-release
        --project "Octopus Service Account Creator"
        --from "Development"
        --deployTo "Development (Security)"
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
        --latestSuccessful
      shell: bash