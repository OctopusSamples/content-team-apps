name: 'Github Repo Creator'
description: Build and deploy the GitHub Repo Creator
inputs:
  dockerhub_username:
    required: true
  dockerhub_password:
    required: true
  github_token:
    required: true
  octopus_server_url:
    required: true
  octopus_api_token:
    required: true
  run_number:
    required: true
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_password }}

    - uses: nelonoel/branch-name@v1.0.1

    - name: Install Octopus CLI
      uses: OctopusDeploy/install-octopus-cli-action@v1.1.1
      with:
        version: latest

    - name: Set up JDK 1.17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    - uses: DeLaGuardo/setup-graalvm@4.0
      with:
        graalvm: '22.0.0.2'
        java: 'java17'
        arch: 'amd64'

    - name: Install native-image component
      run: gu install native-image
      shell: bash

    - name: Checkstyle
      run: ./mvnw --batch-mode checkstyle:check
      shell: bash
      working-directory: java

    - name: Install modules
      run: ./mvnw --batch-mode install -DskipTests
      shell: bash
      working-directory: java

    - name: Update version
      run: ./mvnw --batch-mode build-helper:parse-version versions:set -DnewVersion=1.0.${{ github.run_number }}
      shell: bash
      working-directory: java/github-repo-creator

    - name: List dependencies
      run: ./mvnw --batch-mode dependency:tree --no-transfer-progress
      shell: bash
      working-directory: java/github-repo-creator

    # Build the package for web apps by not including the lambda profile.
    - name: Build with Maven for web
      run: ./mvnw --batch-mode clean package --file pom.xml -DskipTests "-Dquarkus.profile=prod"
      shell: bash
      working-directory: java/github-repo-creator

    - name: Build Docker Image
      run: |
        docker build -f src/main/docker/Dockerfile.legacy-jar -t octopussamples/githubrepocreator:1.0.${{ inputs.run_number }}${{ env.PRERELEASE }} .
        docker push octopussamples/githubrepocreator:1.0.${{ inputs.run_number }}${{ env.PRERELEASE }}
        docker image tag octopussamples/githubrepocreator:1.0.${{ inputs.run_number }}${{ env.PRERELEASE }} octopussamples/githubrepocreator
        docker push octopussamples/githubrepocreator
      shell: bash
      working-directory: java/github-repo-creator

    # Build the package with the lambda profile by setting the "lambda" property. This ensures the
    # io.quarkus:quarkus-amazon-lambda dependency is included. See the pom.xml file for details
    # on the lambda profile.
    - name: Build with Maven for lambda
      run: ./mvnw --batch-mode clean package --file pom.xml -Plambda -DskipTests "-Dquarkus.profile=prod"
      shell: bash
      working-directory: java/github-repo-creator

    - name: Test Backend
      run: ./mvnw --batch-mode test
      shell: bash
      working-directory: java/github-repo-creator

    - name: Generate JaCoCo Badges
      id: jacocoMod1
      uses: cicirello/jacoco-badge-generator@v2.8.1
      with:
        generate-branches-badge: true
        jacoco-csv-file: java/github-repo-creator/target/jacoco-report/jacoco.csv
        coverage-badge-filename: repocreator.svg
        branches-badge-filename: repocreatorbranches.svg

    - name: Update resources
      if: ${{ env.BRANCH_NAME == 'main' }}
      uses: test-room-7/action-update-file@v1.6.0
      with:
        file-path: |
          .github/badges/repocreator.svg
          .github/badges/repocreatorbranches.svg
        commit-msg: Update badges
        github-token: ${{ inputs.github_token }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        tag_name: github-repo-creator.1.0.${{ inputs.run_number }}
        release_name: GitHub OAuth Proxy Release 1.0.${{ inputs.run_number }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: java/github-repo-creator/target/github-repo-creator-runner.jar
        asset_name: github-repo-creator-runner.jar
        asset_content_type: application/octet-stream

    - name: Rename zip
      run: >
        mv github-repo-creator/target/function.zip
        github-repo-creator-lambda.1.0.${{ inputs.run_number }}.zip
      shell: bash
      working-directory: java

    - name: Push Package
      run: >
        octo push --package github-repo-creator-lambda.1.0.${{ inputs.run_number }}.zip
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
      shell: bash
      working-directory: java

    - name: Generate SBOM
      run: ./mvnw cyclonedx:makeAggregateBom -DskipTests --no-transfer-progress --batch-mode
      shell: bash
      working-directory: java

    - name: Build SBOM package
      run: >
        octo pack
        --id github-repo-creator-lambda-sbom
        --version 1.0.${{ inputs.run_number }}
        --format zip
        --include **/bom.xml
      shell: bash
      working-directory: java

    - name: Push SBOM Package
      run: >
        octo push --package github-repo-creator-lambda-sbom.1.0.${{ inputs.run_number }}.zip
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
      shell: bash
      working-directory: java

    - name: Generate Octopus Deploy build information
      uses: xo-energy/action-octopus-build-information@v1.1.2
      with:
        octopus_api_key: ${{ inputs.octopus_api_token }}
        octopus_project: GitHub Repo Creator
        octopus_server: ${{ inputs.octopus_server_url }}
        octopus_space: Content Team
        push_version: 1.0.${{ inputs.run_number }}
        push_package_ids: github-repo-creator-lambda
        push_overwrite_mode: OverwriteExisting
        output_path: octopus

    - name: Trigger deployment
      if: ${{ env.BRANCH_NAME == 'main' }}
      run: >
        octo create-release
        --project "GitHub Repo Populator"
        --version 1.0.${{ inputs.run_number }}
        --deployTo "Development"
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
      shell: bash

    - name: Trigger deployment
      if: ${{ env.BRANCH_NAME == 'main' }}
      run: >
        octo create-release
        --project "GitHub Commit Creator"
        --version 1.0.${{ inputs.run_number }}
        --deployTo "Development"
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
        --waitForDeployment
        --deploymentTimeout 00:30:00
      shell: bash

    - name: Trigger deployment to security environment
      if: ${{ env.BRANCH_NAME == 'main' }}
      run: >
        octo promote-release
        --project "GitHub Repo Populator"
        --from "Development"
        --deployTo "Development (Security)"
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
        --latestSuccessful
      shell: bash


    - name: Trigger deployment to security environment
      if: ${{ env.BRANCH_NAME == 'main' }}
      run: >
        octo promote-release
        --project "GitHub Commit Creator"
        --from "Development"
        --deployTo "Development (Security)"
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Content Team"
        --latestSuccessful
      shell: bash