# The port used when running as a web container
quarkus.http.port=${PORT:12000}
quarkus.lambda.mock-event-server.dev-port=12001
quarkus.lambda.mock-event-server.test-port=12002
# HTTP tests bind to a random port
quarkus.http.test-port=0
# Bind to all interfaces
quarkus.http.host=0.0.0.0
quarkus.package.type=uber-jar
quarkus.log.min-level=INFO
# Limit jacoco reports to the packages in this project.
quarkus.jacoco.includes=com/octopus/serviceaccount/**
# https://github.com/oracle/graal/issues/3875
quarkus.native.additional-build-args=-J--add-exports=java.management/sun.management=ALL-UNNAMED
# Allow the HTTP interface to be accessed from other domains
quarkus.http.cors=true
# Allow credentials like cookies
quarkus.http.cors.access-control-allow-credentials=true
# Trust all TLS certs when making outbound connections
quarkus.tls.trust-all=true
# Set this to true to disable all JWT based authentication and authorization. Disabling security is useful for local debugging.
cognito.disable-auth=${COGNITO_DISABLE_AUTH:true}
# A base64 encoded copy of the JWK
# Get the JWK from https://cognito-idp.{region}.amazonaws.com/{userPoolId}/.well-known/jwks.json
cognito.jwk-base64=${COGNITO_JWK:}
# The name of the scope used to grant access to the service. Leave the value blank if not using machine-to-machine communication.
cognito.admin-claim=${COGNITO_ADMIN_CLAIM:}
# The client ID of the Cognito app client used to generate client credentials (i.e. machine-to-machine) access tokens
cognito.client-id=${COGNITO_CLIENT_ID:unknown}
# The Cognito group an end user must be in to work with the Audit records. Leave the value unset if not using RBAC.
cognito.admin-group=${COGNITO_ADMIN_GROUP:Developers}
octopus.encryption=${OCTOPUS_ENCRYPTION}
octopus.salt=${OCTOPUS_SALT}
# Set this to true to return an empty API key and not attempt to modify the Octopus instance.
# This is useful to have a deployed service that the frontend can interact with, but when
# you do not wish to modify an Octopus instance. It is also useful when the
# octopus-oauth-backend has been disabled, as there is no ID token to use to modify an Octopus instance.
# Any GitHub workflows should check for an empty API key secret and display an appropriate message to the user.
octopus.disable.account-creation=${OCTOPUS_DISABLE_ACCOUNT_CREATION:false}
# If account creation is disabled, this predefined key may be returned.
octopus.test-api-key=${OCTOPUS_TEST_API_KEY:}
# If account creation is disabled, this predefined server may be returned.
octopus.test-server=${OCTOPUS_TEST_SERVER:}