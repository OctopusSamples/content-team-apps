# The port used when running as a web container
quarkus.http.port=${PORT:13000}
# The name of the lambda handler
quarkus.lambda.handler=${LAMBDA_HANDLER:PopulateGithubRepo}
# HTTP tests bind to a random port
quarkus.http.test-port=0
# Bind to all interfaces
quarkus.http.host=0.0.0.0
quarkus.package.type=uber-jar
quarkus.log.min-level=INFO
# Make sure the public key is included in the native binary
quarkus.native.resources.includes=*.der
# Limit jacoco reports to the packages in this project.
quarkus.jacoco.includes=com/octopus/githubrepo/**
# https://github.com/oracle/graal/issues/3875. Also include the library files from lazysodium-java. Note that I never got lazysodium to work with a native build though.
quarkus.native.additional-build-args=-J--add-exports=java.management/sun.management=ALL-UNNAMED,-H:IncludeResources=".+?/.+?\\.so$|.+?/.+?\\.dll$|.+?/.+?\\.dynlib$"
# Allow the HTTP interface to be accessed from other domains
quarkus.http.cors=true
# Allow credentials like cookies
quarkus.http.cors.access-control-allow-credentials=true
# Trust all TLS certs when making outbound connections
quarkus.tls.trust-all=true
# Set this to true to disable all JWT based authentication and authorization. Disabling security is useful for local debugging.
cognito.disable-auth=${COGNITO_DISABLE_AUTH:true}
# A base64 encoded copy of the JWK
# Get the JWK from https://cognito-idp.{region}.amazonaws.com/{userPoolId}/.well-known/jwks.json
cognito.jwk-base64=${COGNITO_JWK:}
# The name of the scope used to grant access to the service. Leave the value blank if not using machine-to-machine communication.
cognito.admin-claim=${COGNITO_ADMIN_CLAIM:}
# The client ID of the Cognito app client used to generate client credentials (i.e. machine-to-machine) access tokens
cognito.client-id=${COGNITO_CLIENT_ID:unknown}
# The secret used for machine-to-machine communication.
cognito.client-secret=${COGNITO_CLIENT_SECRET:}
# The Cognito group an end user must be in to work with the Audit records. Leave the value unset if not using RBAC.
cognito.admin-group=${COGNITO_ADMIN_GROUP:Developers}
github.encryption=${GITHUB_ENCRYPTION}
github.salt=${GITHUB_SALT}
# Set to true to have this service return immediately instead of trying to populate a repo. Useful for testing the frontend without modifying anything on the backend.
github.disable.repo-creation=${GITHUB_DISABLE_REPO_CREATION:false}
# The base URL for the GitHub API
quarkus.rest-client."com.octopus.githubrepo.infrastructure.clients.GitHubClient".url=https://api.github.com
quarkus.rest-client."com.octopus.githubrepo.infrastructure.clients.PopulateRepoClient".url=${REPO_POPULATOR:https://o9rot8lk3g.execute-api.us-west-1.amazonaws.com/Development}
quarkus.rest-client."com.octopus.githubrepo.infrastructure.clients.GenerateTemplateClient".url=${TEMPLATE_GENERATOR:http://localhost:4000}
# The base url for the audits microservice.
# The API Gateway used by shared apps like the audit service is created by the "Content Team Shared Network Infrastructure" project.
# https://deploy.octopus.app/app#/Spaces-882/projects/content-team-shared-network-infrastructure/deployments
quarkus.rest-client."com.octopus.githubrepo.infrastructure.clients.AuditClient".url=${AUDIT_SERVICE:https://b3u42cdd6h.execute-api.us-west-1.amazonaws.com/Development}
# The base url for the cognito user pool. The default value here is the development instance.
# This Cognito instance is created by the "Cognito" project.
# https://deploy.octopus.app/app#/Spaces-882/projects/cognito/deployments
quarkus.rest-client."com.octopus.jenkins.github.infrastructure.client.CognitoClient".url=${COGNITO_SERVICE:https://content-team-octopus.auth.us-west-1.amazoncognito.com}
# The base64 encoded version of the private key matching the public key used by the frontend to encrypt values.
client.private-key-base64=${CLIENT_PRIVATE_KEY}