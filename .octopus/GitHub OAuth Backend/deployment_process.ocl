step "Create Bucket" {

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormationStackName = "#{CloudFormationName.S3Bucket}"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                {
                  "Resources": {
                    "LambdaS3Bucket": {
                      "Type": "AWS::S3::Bucket"
                    }
                  },
                  "Outputs" : {
                    "LambdaS3Bucket" : {
                      "Description" : "The S3 Bucket",
                      "Value" : {"Ref": "LambdaS3Bucket"}
                    }
                  }
                }
            EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[]"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Upload Lambda" {

    action {
        action_type = "Octopus.AwsUploadS3"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.S3.BucketName = "#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}"
            Octopus.Action.Aws.S3.PackageOptions = "{\"bucketKey\":\"\",\"bucketKeyBehaviour\":\"Filename\",\"bucketKeyPrefix\":\"\",\"storageClass\":\"STANDARD\",\"cannedAcl\":\"private\",\"metadata\":[],\"tags\":[]}"
            Octopus.Action.Aws.S3.TargetMode = "EntirePackage"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Octopus Server (built-in)"
            Octopus.Action.Package.PackageId = "github-oauth-backend-lambda"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool_variable = "WorkerPool"

        packages {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "github-oauth-backend-lambda"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "Get Stack Outputs" {

    action {
        action_type = "Octopus.AwsRunScript"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormationName.ApiGateway} \
                    --query "Stacks[0].Outputs[?OutputKey=='#{CloudFormation.Output.OAuthGithubEndpointVariableName}'].OutputValue" \
                    --output text
                
                PIPELINE_RESOURCE_ID=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormationName.ApiGateway} \
                    --query "Stacks[0].Outputs[?OutputKey=='#{CloudFormation.Output.OAuthGithubEndpointVariableName}'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "ApiPipelineResource" ${PIPELINE_RESOURCE_ID}
                
                REST_API=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormationName.ApiGateway} \
                    --query "Stacks[0].Outputs[?OutputKey=='RestApi'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "RestApi" ${REST_API}
                
                TIMESTAMP=$(date '+%Y%m%d%H%M%S')
                
                set_octopusvariable "DeploymentId" ${TIMESTAMP}
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "WorkerPool"

        container {
            feed = "Dockerhub"
            image = "octopusdeploy/worker-tools:3.2.0-ubuntu.18.04"
        }
    }
}

step "Deploy OAuth Proxy" {

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormationStackName = "#{CloudFormation.BackendLoginStack}"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                {
                  "Parameters" : {
                    "EnvironmentName" : {
                      "Type" : "String",
                      "Default" : "#{Octopus.Environment.Name}"
                    },
                    "RestApi" : {
                      "Type" : "String"
                    },
                    "ResourceId" : {
                      "Type" : "String"
                    },
                    "LambdaS3Key" : {
                      "Type" : "String"
                    },
                    "LambdaS3Bucket": {
                      "Type": "String"
                    },
                    "GithubClientId" : {
                      "Type" : "String"
                    },
                    "GithubClientSecret" : {
                      "Type" : "String"
                    },
                    "GithubClientRedirect" : {
                      "Type" : "String"
                    },
                    "QuarkusLambdaHandler" : {
                      "Type" : "String"
                    },
                    "GithubEncryption" : {
                      "Type" : "String"
                    },
                    "GithubSalt" : {
                      "Type" : "String"
                    },
                    "LambdaHandler": {
                      "Type": "String"
                    },
                    "LambdaDescription": {
                     	"Type": "String" 
                    }
                  },
                  "Resources": {
                    "AppLogGroupOne": {
                      "Type": "AWS::Logs::LogGroup",
                      "Properties": {
                        "LogGroupName": { "Fn::Sub": "/aws/lambda/${EnvironmentName}-${LambdaName}" }
                      }
                    },
                    "IamRoleLambdaOneExecution": {
                      "Type": "AWS::IAM::Role",
                      "Properties": {
                        "AssumeRolePolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Principal": {
                                "Service": [
                                  "lambda.amazonaws.com"
                                ]
                              },
                              "Action": [
                                "sts:AssumeRole"
                              ]
                            }
                          ]
                        },
                        "Policies": [
                          {
                            "PolicyName": { "Fn::Sub": "${EnvironmentName}-${LambdaName}-policy" },
                            "PolicyDocument": {
                              "Version": "2012-10-17",
                              "Statement": [
                                {
                                  "Effect": "Allow",
                                  "Action": [
                                    "logs:CreateLogStream",
                                    "logs:CreateLogGroup",
                                    "logs:PutLogEvents"
                                  ],
                                  "Resource": [
                                    {
                                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${EnvironmentName}-${LambdaName}*:*"
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ],
                        "Path": "/",
                        "RoleName": { "Fn::Sub": "${EnvironmentName}-${LambdaName}-role" }
                      }
                    },
                    "OauthProxyLambda": {
                      "Type": "AWS::Lambda::Function",
                      "Properties": {
                        "Description": {"Ref": "LambdaDescription"},
                        "Code": {
                          "S3Bucket": {"Ref": "LambdaS3Bucket"},
                          "S3Key": {"Ref": "LambdaS3Key"}
                        },
                        "Environment": {
                          "Variables": {
                          	"GITHUB_CLIENT_ID": {"Ref": "GithubClientId"},
                            "GITHUB_CLIENT_SECRET": {"Ref": "GithubClientSecret"},
                            "LAMBDA_HANDLER": {"Ref": "LambdaHandler"},
                            "GITHUB_REDIRECT": {"Ref": "GithubClientRedirect"},
                            "GITHUB_ENCRYPTION": {"Ref": "GithubEncryption"},
                            "GITHUB_SALT": {"Ref": "GithubSalt"}
                          }
                        },
                        "FunctionName": { "Fn::Sub": "${EnvironmentName}-${LambdaName}" },
                        "Handler": "not.used.in.provided.runtime",
                        "MemorySize": 128,
                        "PackageType": "Zip",
                        "Role": {
                          "Fn::GetAtt": [
                            "IamRoleLambdaOneExecution",
                            "Arn"
                          ]
                        },
                        "Runtime": "provided",
                        "Timeout": 30
                      }
                    },
                    "LambdaVersion#{DeploymentId}": {
                     	"Type": "AWS::Lambda::Version",
                      	"Properties": {
                          "FunctionName": {"Ref": "OauthProxyLambda"},
                          "Description": {"Ref": "LambdaDescription"},
                          "ProvisionedConcurrencyConfig": {
                          "ProvisionedConcurrentExecutions": 20
                        }
                      }
                    },
                    "OauthProxyLambdaPermissions": {
                      "Type": "AWS::Lambda::Permission",
                      "Properties": {
                        "FunctionName": {
                		  "Ref": "LambdaVersion#{DeploymentId}"
                	    },
                        "Action": "lambda:InvokeFunction",
                        "Principal": "apigateway.amazonaws.com",
                        "SourceArn": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":execute-api:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              ":",
                              {"Ref": "RestApi"},
                              "/*/*"
                            ]
                          ]
                        }
                      }
                    },
                    "ApiPipelineOAuthGitHubLogin": {
                      "Type": "AWS::ApiGateway::Resource",
                      "Properties": {
                        "RestApiId": {
                          "Ref": "RestApi"
                        },
                        "ParentId": {
                          "Ref": "ResourceId"
                        },
                        "PathPart": "login"
                      }
                	},
                    "OauthProxyMethod": {
                      "Type": "AWS::ApiGateway::Method",
                      "Properties": {      
                        "AuthorizationType": "NONE",  
                        "HttpMethod": "ANY",
                        "Integration": {          
                          "IntegrationHttpMethod": "POST",          
                          "TimeoutInMillis": 20000,
                          "Type": "AWS_PROXY",
                          "Uri": {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                  "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                               {
                		         "Ref": "LambdaVersion#{DeploymentId}"
                	           },
                                "/invocations"
                              ]
                            ]
                          }
                        },        
                        "ResourceId": {
                          "Ref": "ApiPipelineOAuthGitHubLogin"
                        },
                        "RestApiId": {"Ref": "RestApi"}
                      }
                    },
                    "Deployment#{Octopus.Deployment.Id | Replace -}": {
                      "Type": "AWS::ApiGateway::Deployment",
                      "Properties": {
                        "RestApiId": {"Ref": "RestApi"}
                      },
                      "DependsOn": [
                        "OauthProxyMethod"
                      ]
                    }
                  },
                  "Outputs" : {
                    "DeploymentId" : {
                      "Description" : "The deployment id",
                      "Value" : {"Ref": "Deployment#{Octopus.Deployment.Id | Replace -}"}
                    }
                  }
                }
            EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"RestApi\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"},{\"ParameterKey\":\"ResourceId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.ApiPipelineResource}\"},{\"ParameterKey\":\"LambdaS3Key\",\"ParameterValue\":\"#{Octopus.Action[Upload Lambda].Package[].PackageId}.#{Octopus.Action[Upload Lambda].Package[].PackageVersion}.zip\"},{\"ParameterKey\":\"LambdaS3Bucket\",\"ParameterValue\":\"#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}\"},{\"ParameterKey\":\"GithubClientId\",\"ParameterValue\":\"#{GitHub.ClientId}\"},{\"ParameterKey\":\"GithubClientSecret\",\"ParameterValue\":\"#{GitHub.ClientSecret}\"},{\"ParameterKey\":\"GithubClientRedirect\",\"ParameterValue\":\"#{Client.LoginRedirect}\"},{\"ParameterKey\":\"QuarkusLambdaHandler\",\"ParameterValue\":\"login\"},{\"ParameterKey\":\"GithubEncryption\",\"ParameterValue\":\"#{Client.EncryptionKey}\"},{\"ParameterKey\":\"GithubSalt\",\"ParameterValue\":\"#{Client.EncryptionSalt}\"},{\"ParameterKey\":\"LambdaHandler\",\"ParameterValue\":\"login\"},{\"ParameterKey\":\"LambdaDescription\",\"ParameterValue\":\"#{Octopus.Deployment.Id} v#{Octopus.Action[Upload Lambda].Package[].PackageVersion}\"}]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"RestApi\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"},{\"ParameterKey\":\"ResourceId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.ApiPipelineResource}\"},{\"ParameterKey\":\"LambdaS3Key\",\"ParameterValue\":\"#{Octopus.Action[Upload Lambda].Package[].PackageId}.#{Octopus.Action[Upload Lambda].Package[].PackageVersion}.zip\"},{\"ParameterKey\":\"LambdaS3Bucket\",\"ParameterValue\":\"#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}\"},{\"ParameterKey\":\"GithubClientId\",\"ParameterValue\":\"#{GitHub.ClientId}\"},{\"ParameterKey\":\"GithubClientSecret\",\"ParameterValue\":\"#{GitHub.ClientSecret}\"},{\"ParameterKey\":\"GithubClientRedirect\",\"ParameterValue\":\"#{Client.LoginRedirect}\"},{\"ParameterKey\":\"QuarkusLambdaHandler\",\"ParameterValue\":\"login\"},{\"ParameterKey\":\"GithubEncryption\",\"ParameterValue\":\"#{Client.EncryptionKey}\"},{\"ParameterKey\":\"GithubSalt\",\"ParameterValue\":\"#{Client.EncryptionSalt}\"},{\"ParameterKey\":\"LambdaHandler\",\"ParameterValue\":\"login\"},{\"ParameterKey\":\"LambdaDescription\",\"ParameterValue\":\"#{Octopus.Deployment.Id} v#{Octopus.Action[Upload Lambda].Package[].PackageVersion}\"}]"
            Octopus.Action.Aws.IamCapabilities = "[\"CAPABILITY_AUTO_EXPAND\",\"CAPABILITY_IAM\",\"CAPABILITY_NAMED_IAM\"]"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Update Stage" {

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormationStackName = "#{CloudFormationName.ApiGatewayStage}"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                {
                  "Parameters" : {
                    "EnvironmentName" : {
                      "Type" : "String",
                      "Default" : "#{Octopus.Environment.Name}"
                    },
                    "DeploymentId" : {
                      "Type" : "String",
                      "Default" : "Deployment#{DeploymentId}"
                    },
                    "ApiGatewayId" : {
                      "Type" : "String"
                    }
                  },
                  "Resources": {
                    "Stage": {
                      "Type": "AWS::ApiGateway::Stage",
                      "Properties": {
                        "DeploymentId": {"Fn::Sub": "${DeploymentId}"},
                        "RestApiId": {"Fn::Sub": "${ApiGatewayId}"},
                        "StageName": {"Fn::Sub": "${EnvironmentName}"},
                        "Variables": {
                         	"indexPage":  {"Fn::Sub": "/${EnvironmentName}/index.html"}
                        }
                      }
                    }
                  },
                  "Outputs": {
                    "StageURL": {
                      "Description": "The url of the stage",
                      "Value": {
                        "Fn::Join": [
                          "",
                          [
                            "https://",
                            {"Ref": "ApiGatewayId"},
                            ".execute-api.",
                            {
                              "Ref": "AWS::Region"
                            },
                            ".amazonaws.com/",
                            {
                              "Ref": "Stage"
                            },
                            "/"
                          ]
                        ]
                      }
                    }
                  }
                }
            EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"DeploymentId\",\"ParameterValue\":\"#{Octopus.Action[Deploy Pipeline Backend Manual].Output.AwsOutputs[DeploymentId]}\"},{\"ParameterKey\":\"ApiGatewayId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"}]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"DeploymentId\",\"ParameterValue\":\"#{Octopus.Action[Deploy Pipeline Backend Manual].Output.AwsOutputs[DeploymentId]}\"},{\"ParameterKey\":\"ApiGatewayId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"}]"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Get Stage URL" {

    action {
        action_type = "Octopus.AwsRunScript"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                STARGE_URL=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormationName.ApiGatewayStage} \
                    --query "Stacks[0].Outputs[?OutputKey=='StageURL'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "StageURL" ${STARGE_URL}
                
                echo "Stage URL: ${STARGE_URL}"
                
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "WorkerPool"

        container {
            feed = "Dockerhub"
            image = "octopusdeploy/worker-tools:3.2.0-ubuntu.18.04"
        }
    }
}

step "HTTP - Test URL" {

    action {
        environments = ["Development", "Production"]
        properties = {
            ExpectedCode = "201"
            ExpectedResponse = "OK"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-1681"
            Octopus.Action.Template.Version = "18"
            SecurityProtocol = "Tls12"
            TimeoutSeconds = "60"
            Uri = "#{Octopus.Action[Get Stage URL].Output.StageURL}/api/pipeline/github/generate?action=health"
            UseWindowsAuth = "False"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Check for vulnerabilities" {
    condition = "Always"

    action {
        action_type = "Octopus.Script"
        environments = ["Development (Security)", "Production (Security)"]
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                cd github-actions-builder-github-backend-lambda-sbom
                SUCCESS=0
                for x in **/bom.xml; do 
                	docker run --rm -v "$PWD:/app" appthreat/dep-scan scan --bom "/app/$x" --type bom 2>&1
                    if [[ $? -ne 0 ]]; then
                    	SUCCESS=1
                    fi
                done
                
                set_octopusvariable "VerificationResult" $SUCCESS
                
                exit 0
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool_variable = "WorkerPool"

        packages "github-actions-builder-github-backend-lambda-sbom" {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "github-actions-builder-github-backend-lambda-sbom"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "Slack - Send Simple Notification - Bash" {
    condition = "Variable"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Action[Check for vulnerabilities].Output.VerificationResult != \"0\"}True#{/if}"
    }

    action {
        environments = ["Development (Security)", "Production (Security)"]
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-1721"
            Octopus.Action.Template.Version = "1"
            ssn_Color = "danger"
            ssn_HookUrl = "#{Slack.Hook}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "Open #{Octopus.Web.ServerUri}#{Octopus.Web.DeploymentLink} to review the logs."
            ssn_Title = "Vulnerabilities found in Jenkins Pipeline Generator"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool_variable = "WorkerPool"
    }
}