step "Create Bucket" {

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormation.Tags = "[{\"key\":\"Environment\",\"value\":\"#{Octopus.Environment.Name}\"},{\"key\":\"Deployment Project\",\"value\":\"Jenkins Pipeline Generator\"},{\"key\":\"Team\",\"value\":\"Content Marketing\"}]"
            Octopus.Action.Aws.CloudFormationStackName = "#{CloudFormationName.S3Bucket}"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                {
                  "Resources": {
                    "LambdaS3Bucket": {
                      "Type": "AWS::S3::Bucket"
                    }
                  },
                  "Outputs" : {
                    "LambdaS3Bucket" : {
                      "Description" : "The S3 Bucket",
                      "Value" : {"Ref": "LambdaS3Bucket"}
                    }
                  }
                }
            EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[]"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Upload Lambda" {

    action {
        action_type = "Octopus.AwsUploadS3"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.S3.BucketName = "#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}"
            Octopus.Action.Aws.S3.PackageOptions = "{\"bucketKey\":\"\",\"bucketKeyBehaviour\":\"Filename\",\"bucketKeyPrefix\":\"\",\"storageClass\":\"STANDARD\",\"cannedAcl\":\"private\",\"metadata\":[],\"tags\":[]}"
            Octopus.Action.Aws.S3.TargetMode = "EntirePackage"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Octopus Server (built-in)"
            Octopus.Action.Package.PackageId = "jenkins-pipeline-builder-github-backend-lambda"
        }
        worker_pool_variable = "WorkerPool"

        packages {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "jenkins-pipeline-builder-github-backend-lambda"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "Upload Lambda Proxy" {

    action {
        action_type = "Octopus.AwsUploadS3"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.S3.BucketName = "#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}"
            Octopus.Action.Aws.S3.PackageOptions = "{\"bucketKey\":\"\",\"bucketKeyBehaviour\":\"Filename\",\"bucketKeyPrefix\":\"\",\"storageClass\":\"STANDARD\",\"cannedAcl\":\"private\",\"metadata\":[],\"tags\":[]}"
            Octopus.Action.Aws.S3.TargetMode = "EntirePackage"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Content Team Apps"
            Octopus.Action.Package.PackageId = "com.octopus:reverse-proxy"
        }
        worker_pool_variable = "WorkerPool"

        packages {
            acquisition_location = "Server"
            feed = "Content Team Apps"
            package_id = "com.octopus:reverse-proxy"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "Get Stack Outputs" {

    action {
        action_type = "Octopus.AwsRunScript"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
            Octopus.Action.Script.ScriptBody = <<-EOT
                aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormationName.ApiGateway} \
                    --query "Stacks[0].Outputs[?OutputKey=='#{CloudFormation.Output.PipelineEndpointVariableName}'].OutputValue" \
                    --output text
                
                PIPELINE_RESOURCE_ID=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormationName.ApiGateway} \
                    --query "Stacks[0].Outputs[?OutputKey=='#{CloudFormation.Output.PipelineEndpointVariableName}'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "ApiPipelineJenkinsGenerate" ${PIPELINE_RESOURCE_ID}
                
                REST_API=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormationName.ApiGateway} \
                    --query "Stacks[0].Outputs[?OutputKey=='RestApi'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "RestApi" ${REST_API}
                
                COGNITO_POOL_ID=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormation.Cognito} \
                    --query "Stacks[0].Outputs[?OutputKey=='CognitoUserPoolID'].OutputValue" \
                    --output text)
                echo "Cognito Pool ID: ${COGNITO_POOL_ID}"
                set_octopusvariable "CognitoPoolId" ${COGNITO_POOL_ID}
                
                TIMESTAMP=$(date '+%Y%m%d%H%M%S')
                
                set_octopusvariable "DeploymentId" ${TIMESTAMP}
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "WorkerPool"

        container {
            feed = "Dockerhub"
            image = "octopusdeploy/worker-tools:3.2.0-ubuntu.18.04"
        }
    }
}

step "Deploy Jenkins Pipeline Backend Manual" {

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormation.Tags = "[{\"key\":\"Environment\",\"value\":\"#{Octopus.Environment.Name}\"},{\"key\":\"Deployment Project\",\"value\":\"Jenkins Pipeline Generator\"},{\"key\":\"Team\",\"value\":\"Content Marketing\"}]"
            Octopus.Action.Aws.CloudFormationStackName = "#{CloudFormationName.Backend}"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                Parameters:
                  EnvironmentName:
                    Type: String
                    Default: '#{Octopus.Environment.Name}'
                  RestApi:
                    Type: String
                  ResourceId:
                    Type: String
                  LambdaS3Key:
                    Type: String
                  LambdaS3Bucket:
                    Type: String
                  ProxyLambdaS3Key:
                    Type: String
                  GithubClientId:
                    Type: String
                  GithubClientSecret:
                    Type: String
                  LambdaName:
                    Type: String
                  LambdaDescription:
                    Type: String
                  GithubEncryption:
                    Type: String
                  GithubSalt:
                    Type: String
                  GithubLoginPage:
                    Type: String
                  CognitoAuditClientId:
                    Type: String
                  CognitoAuditClientSecret:
                    Type: String
                  CognitoService:
                    Type: String
                  AuditService:
                    Type: String
                  CognitoRegion:
                    Type: String
                  CognitoPool:
                    Type: String
                  CognitoJwk:
                    Type: String
                  CognitoRequiredGroup:
                    Type: String
                  ServiceBusProxyClientId:
                    Type: String
                  ServiceBusProxyClientSecret:
                    Type: String
                  ServiceBusUrl:
                    Type: String
                Resources:
                  AppLogGroupProxyLambda:
                    Type: 'AWS::Logs::LogGroup'
                    Properties:
                      LogGroupName: !Sub '/aws/lambda/${EnvironmentName}-${LambdaName}-Proxy'
                      RetentionInDays: 14
                  IamRoleProxyLambdaExecution:
                    Type: 'AWS::IAM::Role'
                    Properties:
                      AssumeRolePolicyDocument:
                        Version: 2012-10-17
                        Statement:
                          - Effect: Allow
                            Principal:
                              Service:
                                - lambda.amazonaws.com
                            Action:
                              - 'sts:AssumeRole'
                      ManagedPolicyArns:
                        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
                      Policies:
                        - PolicyName: !Sub '${EnvironmentName}-${LambdaName}-Proxy-policy'
                          PolicyDocument:
                            Version: 2012-10-17
                            Statement:
                              - Effect: Allow
                                Action:
                                  - 'logs:CreateLogStream'
                                  - 'logs:CreateLogGroup'
                                  - 'logs:PutLogEvents'
                                Resource:
                                  - !Sub >-
                                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${EnvironmentName}-${LambdaName}-Proxy*:*
                              - Effect: Allow
                                Action:
                                  - 'lambda:InvokeFunction'
                                Resource:
                                  - !Sub >-
                                    arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${EnvironmentName}-${LambdaName}*:*
                              - Effect: Allow
                                Action:
                                  - 'lambda:InvokeFunction'
                                Resource:
                                  - !Sub >-
                                    arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${EnvironmentName}-${LambdaName}*
                      Path: /
                      RoleName: !Sub '${EnvironmentName}-${LambdaName}-Proxy-role'
                  ProxyLambdaPermissions:
                    Type: 'AWS::Lambda::Permission'
                    Properties:
                      FunctionName: !GetAtt 
                        - ProxyLambda
                        - Arn
                      Action: 'lambda:InvokeFunction'
                      Principal: apigateway.amazonaws.com
                      SourceArn: !Join 
                        - ''
                        - - 'arn:'
                          - !Ref 'AWS::Partition'
                          - ':execute-api:'
                          - !Ref 'AWS::Region'
                          - ':'
                          - !Ref 'AWS::AccountId'
                          - ':'
                          - !Ref RestApi
                          - /*/*
                  ProxyLambda:
                    Type: 'AWS::Lambda::Function'
                    Properties:
                      Code:
                        S3Bucket: !Ref LambdaS3Bucket
                        S3Key: !Ref ProxyLambdaS3Key
                      Environment:
                        Variables:
                          DEFAULT_LAMBDA: !Ref 'LambdaVersion#{Octopus.Deployment.Id | Replace -}'
                          COGNITO_REGION: !Ref CognitoRegion
                          COGNITO_POOL: !Ref CognitoPool
                          COGNITO_JWK: !Ref CognitoJwk
                          COGNITO_REQUIRED_GROUP: !Ref CognitoRequiredGroup
                      Description: !Sub '${LambdaDescription} Proxy'
                      FunctionName: !Sub '${EnvironmentName}-${LambdaName}-Proxy'
                      Handler: main
                      MemorySize: 128
                      PackageType: Zip
                      Role: !GetAtt 
                        - IamRoleProxyLambdaExecution
                        - Arn
                      Runtime: go1.x
                      Timeout: 30
                  AppLogGroupOne:
                    Type: 'AWS::Logs::LogGroup'
                    Properties:
                      LogGroupName: !Sub '/aws/lambda/${EnvironmentName}-${LambdaName}'
                      RetentionInDays: 14
                  IamRoleLambdaOneExecution:
                    Type: 'AWS::IAM::Role'
                    Properties:
                      AssumeRolePolicyDocument:
                        Version: 2012-10-17
                        Statement:
                          - Effect: Allow
                            Principal:
                              Service:
                                - lambda.amazonaws.com
                            Action:
                              - 'sts:AssumeRole'
                      Policies:
                        - PolicyName: !Sub '${EnvironmentName}-${LambdaName}-policy'
                          PolicyDocument:
                            Version: 2012-10-17
                            Statement:
                              - Effect: Allow
                                Action:
                                  - 'logs:CreateLogStream'
                                  - 'logs:CreateLogGroup'
                                  - 'logs:PutLogEvents'
                                Resource:
                                  - !Sub >-
                                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${EnvironmentName}-${LambdaName}*:*
                      Path: /
                      RoleName: !Sub '${EnvironmentName}-${LambdaName}-role'
                  LambdaOne:
                    Type: 'AWS::Lambda::Function'
                    Properties:
                      Description: !Ref LambdaDescription
                      Code:
                        S3Bucket: !Ref LambdaS3Bucket
                        S3Key: !Ref LambdaS3Key
                      Environment:
                        Variables:
                          GITHUB_CLIENT_ID: !Ref GithubClientId
                          GITHUB_CLIENT_SECRET: !Ref GithubClientSecret
                          GITHUB_ENCRYPTION: !Ref GithubEncryption
                          GITHUB_SALT: !Ref GithubSalt
                          GITHUB_LOGIN_PAGE: !Ref GithubLoginPage
                          COGNITO_AUDIT_CLIENT_ID: !Ref CognitoAuditClientId
                          COGNITO_AUDIT_CLIENT_SECRET: !Ref CognitoAuditClientSecret
                          COGNITO_SERVICE: !Ref CognitoService
                          AUDIT_SERVICE: !Ref AuditService
                          COGNITO_AZURE_SERVICE_BUS_PROXY_CLIENT_ID: !Ref ServiceBusProxyClientId
                          COGNITO_AZURE_SERVICE_BUS_PROXY_CLIENT_SECRET: !Ref ServiceBusProxyClientSecret
                          SERVICE_BUS_SERVICE: !Ref ServiceBusUrl
                      FunctionName: !Sub '${EnvironmentName}-${LambdaName}'
                      Handler: not.used.in.provided.runtime
                      MemorySize: 256
                      PackageType: Zip
                      Role: !GetAtt 
                        - IamRoleLambdaOneExecution
                        - Arn
                      Runtime: provided
                      Timeout: 30
                  'LambdaVersion#{Octopus.Deployment.Id | Replace -}':
                    Type: 'AWS::Lambda::Version'
                    Properties:
                      FunctionName: !Ref LambdaOne
                      Description: !Ref LambdaDescription
                      ProvisionedConcurrencyConfig:
                        ProvisionedConcurrentExecutions: 20
                  LambdaOnePermissions:
                    Type: 'AWS::Lambda::Permission'
                    Properties:
                      FunctionName: !Ref 'LambdaVersion#{Octopus.Deployment.Id | Replace -}'
                      Action: 'lambda:InvokeFunction'
                      Principal: apigateway.amazonaws.com
                      SourceArn: !Join 
                        - ''
                        - - 'arn:'
                          - !Ref 'AWS::Partition'
                          - ':execute-api:'
                          - !Ref 'AWS::Region'
                          - ':'
                          - !Ref 'AWS::AccountId'
                          - ':'
                          - !Ref RestApi
                          - /*/*
                  LambdaOneMethodOne:
                    Type: 'AWS::ApiGateway::Method'
                    Properties:
                      AuthorizationType: NONE
                      HttpMethod: ANY
                      Integration:
                        IntegrationHttpMethod: POST
                        TimeoutInMillis: 20000
                        Type: AWS_PROXY
                        Uri: !Join 
                          - ''
                          - - 'arn:'
                            - !Ref 'AWS::Partition'
                            - ':apigateway:'
                            - !Ref 'AWS::Region'
                            - ':lambda:path/2015-03-31/functions/'
                            - !GetAtt 
                              - ProxyLambda
                              - Arn
                            - /invocations
                      ResourceId: !Ref ResourceId
                      RestApiId: !Ref RestApi
                  'Deployment#{Octopus.Deployment.Id | Replace -}':
                    Type: 'AWS::ApiGateway::Deployment'
                    Properties:
                      RestApiId: !Ref RestApi
                    DependsOn:
                      - LambdaOneMethodOne
                Outputs:
                  DeploymentId:
                    Description: The deployment id
                    Value: !Ref 'Deployment#{Octopus.Deployment.Id | Replace -}'
                
            EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"RestApi\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"},{\"ParameterKey\":\"ResourceId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.ApiPipelineJenkinsGenerate}\"},{\"ParameterKey\":\"LambdaS3Key\",\"ParameterValue\":\"#{Octopus.Action[Upload Lambda].Package[].PackageId}.#{Octopus.Action[Upload Lambda].Package[].PackageVersion}.zip\"},{\"ParameterKey\":\"LambdaS3Bucket\",\"ParameterValue\":\"#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}\"},{\"ParameterKey\":\"ProxyLambdaS3Key\",\"ParameterValue\":\"#{Octopus.Action[Upload Lambda Proxy].Package[].PackageId}.#{Octopus.Action[Upload Lambda Proxy].Package[].PackageVersion}.zip\"},{\"ParameterKey\":\"GithubClientId\",\"ParameterValue\":\"#{GitHub.GitHubAppClientId}\"},{\"ParameterKey\":\"GithubClientSecret\",\"ParameterValue\":\"#{GitHub.GitHubAppClientSecret}\"},{\"ParameterKey\":\"LambdaName\",\"ParameterValue\":\"#{LambdaName}\"},{\"ParameterKey\":\"LambdaDescription\",\"ParameterValue\":\"v#{Octopus.Action[Upload Lambda].Package[].PackageVersion} #{Octopus.Deployment.Id}\"},{\"ParameterKey\":\"GithubEncryption\",\"ParameterValue\":\"#{Client.EncryptionKey}\"},{\"ParameterKey\":\"GithubSalt\",\"ParameterValue\":\"#{Client.EncryptionSalt}\"},{\"ParameterKey\":\"GithubLoginPage\",\"ParameterValue\":\"/oauth/github/login\"},{\"ParameterKey\":\"CognitoAuditClientId\",\"ParameterValue\":\"#{Cognito.AuditClientId}\"},{\"ParameterKey\":\"CognitoAuditClientSecret\",\"ParameterValue\":\"#{Cognito.AuditClientSecret}\"},{\"ParameterKey\":\"CognitoService\",\"ParameterValue\":\"#{Cognito.Service}\"},{\"ParameterKey\":\"AuditService\",\"ParameterValue\":\"#{ApiGateway.ContentTeamUrl}\"},{\"ParameterKey\":\"CognitoRegion\",\"ParameterValue\":\"#{Cognito.Region}\"},{\"ParameterKey\":\"CognitoPool\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.CognitoPoolId}\"},{\"ParameterKey\":\"CognitoJwk\",\"ParameterValue\":\"#{Cognito.JWK}\"},{\"ParameterKey\":\"CognitoRequiredGroup\",\"ParameterValue\":\"#{Cognito.RequiredGroup}\"},{\"ParameterKey\":\"ServiceBusProxyClientId\",\"ParameterValue\":\"#{Cognito.ServiceBusProxyClientId}\"},{\"ParameterKey\":\"ServiceBusProxyClientSecret\",\"ParameterValue\":\"#{Cognito.ServiceBusProxyClientSecret}\"},{\"ParameterKey\":\"ServiceBusUrl\",\"ParameterValue\":\"#{ServiceBusProxy.Url}\"}]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"RestApi\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"},{\"ParameterKey\":\"ResourceId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.ApiPipelineJenkinsGenerate}\"},{\"ParameterKey\":\"LambdaS3Key\",\"ParameterValue\":\"#{Octopus.Action[Upload Lambda].Package[].PackageId}.#{Octopus.Action[Upload Lambda].Package[].PackageVersion}.zip\"},{\"ParameterKey\":\"LambdaS3Bucket\",\"ParameterValue\":\"#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}\"},{\"ParameterKey\":\"ProxyLambdaS3Key\",\"ParameterValue\":\"#{Octopus.Action[Upload Lambda Proxy].Package[].PackageId}.#{Octopus.Action[Upload Lambda Proxy].Package[].PackageVersion}.zip\"},{\"ParameterKey\":\"GithubClientId\",\"ParameterValue\":\"#{GitHub.GitHubAppClientId}\"},{\"ParameterKey\":\"GithubClientSecret\",\"ParameterValue\":\"#{GitHub.GitHubAppClientSecret}\"},{\"ParameterKey\":\"LambdaName\",\"ParameterValue\":\"#{LambdaName}\"},{\"ParameterKey\":\"LambdaDescription\",\"ParameterValue\":\"v#{Octopus.Action[Upload Lambda].Package[].PackageVersion} #{Octopus.Deployment.Id}\"},{\"ParameterKey\":\"GithubEncryption\",\"ParameterValue\":\"#{Client.EncryptionKey}\"},{\"ParameterKey\":\"GithubSalt\",\"ParameterValue\":\"#{Client.EncryptionSalt}\"},{\"ParameterKey\":\"GithubLoginPage\",\"ParameterValue\":\"/oauth/github/login\"},{\"ParameterKey\":\"CognitoAuditClientId\",\"ParameterValue\":\"#{Cognito.AuditClientId}\"},{\"ParameterKey\":\"CognitoAuditClientSecret\",\"ParameterValue\":\"#{Cognito.AuditClientSecret}\"},{\"ParameterKey\":\"CognitoService\",\"ParameterValue\":\"#{Cognito.Service}\"},{\"ParameterKey\":\"AuditService\",\"ParameterValue\":\"#{ApiGateway.ContentTeamUrl}\"},{\"ParameterKey\":\"CognitoRegion\",\"ParameterValue\":\"#{Cognito.Region}\"},{\"ParameterKey\":\"CognitoPool\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.CognitoPoolId}\"},{\"ParameterKey\":\"CognitoJwk\",\"ParameterValue\":\"#{Cognito.JWK}\"},{\"ParameterKey\":\"CognitoRequiredGroup\",\"ParameterValue\":\"#{Cognito.RequiredGroup}\"},{\"ParameterKey\":\"ServiceBusProxyClientId\",\"ParameterValue\":\"#{Cognito.ServiceBusProxyClientId}\"},{\"ParameterKey\":\"ServiceBusProxyClientSecret\",\"ParameterValue\":\"#{Cognito.ServiceBusProxyClientSecret}\"},{\"ParameterKey\":\"ServiceBusUrl\",\"ParameterValue\":\"#{ServiceBusProxy.Url}\"}]"
            Octopus.Action.Aws.IamCapabilities = "[\"CAPABILITY_AUTO_EXPAND\",\"CAPABILITY_IAM\",\"CAPABILITY_NAMED_IAM\"]"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Update Stage" {

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormation.Tags = "[{\"key\":\"Environment\",\"value\":\"#{Octopus.Environment.Name}\"},{\"key\":\"Deployment Project\",\"value\":\"Jenkins Pipeline Generator\"},{\"key\":\"Team\",\"value\":\"Content Marketing\"}]"
            Octopus.Action.Aws.CloudFormationStackName = "#{CloudFormationName.ApiGatewayStage}"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                {
                  "Parameters" : {
                    "EnvironmentName" : {
                      "Type" : "String",
                      "Default" : "#{Octopus.Environment.Name}"
                    },
                    "DeploymentId" : {
                      "Type" : "String",
                      "Default" : "Deployment#{DeploymentId}"
                    },
                    "ApiGatewayId" : {
                      "Type" : "String"
                    }
                  },
                  "Resources": {
                    "Stage": {
                      "Type": "AWS::ApiGateway::Stage",
                      "Properties": {
                        "DeploymentId": {"Fn::Sub": "${DeploymentId}"},
                        "RestApiId": {"Fn::Sub": "${ApiGatewayId}"},
                        "StageName": {"Fn::Sub": "${EnvironmentName}"},
                        "Variables": {
                         	"indexPage":  {"Fn::Sub": "/${EnvironmentName}/index.html"}
                        },
                        "TracingEnabled": "True"
                      }
                    }
                  },
                  "Outputs": {
                    "StageURL": {
                      "Description": "The url of the stage",
                      "Value": {
                        "Fn::Join": [
                          "",
                          [
                            "https://",
                            {"Ref": "ApiGatewayId"},
                            ".execute-api.",
                            {
                              "Ref": "AWS::Region"
                            },
                            ".amazonaws.com/",
                            {
                              "Ref": "Stage"
                            },
                            "/"
                          ]
                        ]
                      }
                    }
                  }
                }
            EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"DeploymentId\",\"ParameterValue\":\"#{Octopus.Action[Deploy Jenkins Pipeline Backend Manual].Output.AwsOutputs[DeploymentId]}\"},{\"ParameterKey\":\"ApiGatewayId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"}]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"DeploymentId\",\"ParameterValue\":\"#{Octopus.Action[Deploy Jenkins Pipeline Backend Manual].Output.AwsOutputs[DeploymentId]}\"},{\"ParameterKey\":\"ApiGatewayId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"}]"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Get Stage URL" {

    action {
        action_type = "Octopus.AwsRunScript"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
            Octopus.Action.Script.ScriptBody = <<-EOT
                STARGE_URL=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormationName.ApiGatewayStage} \
                    --query "Stacks[0].Outputs[?OutputKey=='StageURL'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "StageURL" ${STARGE_URL}
                
                echo "Stage URL: ${STARGE_URL}"
                
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "WorkerPool"

        container {
            feed = "Dockerhub"
            image = "octopusdeploy/worker-tools:3.2.0-ubuntu.18.04"
        }
    }
}

step "HTTP - Test URL" {

    action {
        environments = ["Development", "Production"]
        properties = {
            ExpectedCode = "201"
            ExpectedResponse = "OK"
            Octopus.Action.Template.Id = "ActionTemplates-1681"
            Octopus.Action.Template.Version = "18"
            SecurityProtocol = "Tls12"
            TimeoutSeconds = "60"
            Uri = "#{Octopus.Action[Get Stage URL].Output.StageURL}api/pipeline/jenkins/generate?action=health"
            UseWindowsAuth = "False"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Check for vulnerabilities" {

    action {
        action_type = "Octopus.AwsRunScript"
        environments = ["Development (Security)", "Production (Security)"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "us-west-2"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
            Octopus.Action.Script.ScriptBody = <<-EOT
                TIMESTAMP=$(date +%s%3N)
                SUCCESS=0
                for x in **/bom.xml; do
                	# Delete any existing report file
                	if [[ -f "$PWD/depscan-bom.json" ]]; then
                      rm "$PWD/depscan-bom.json"
                    fi
                
                    # Generate the report, capturing the output, and ensuring $? is set to the exit code
                    OUTPUT=$(bash -c "docker run --rm -v \"$PWD:/app\" appthreat/dep-scan scan --bom \"/app/bom.xml\" --type bom --report_file /app/depscan.json; exit \$?" 2>&1)
                    
                    # Success is set to 1 if the exit code is not zero
                    if [[ $? -ne 0 ]]; then
                    	SUCCESS=1
                    fi
                    
                    # Report file is not generated if no threats found
                    # https://github.com/ShiftLeftSecurity/sast-scan/issues/168
                    if [[ -f "$PWD/depscan-bom.json" ]]; then
                      new_octopusartifact "$PWD/depscan-bom.json"
                      # The number of lines in the report file equals the number of vulnerabilities found
                      COUNT=$(wc -l < "$PWD/depscan-bom.json") 
                    else
                      COUNT=0
                    fi
                    
                    # Push the result to the database
                    aws timestream-write write-records \
                        --database-name octopusMetrics \
                        --table-name vulnerabilities \
                        --common-attributes "{\"Dimensions\":[{\"Name\":\"Space\", \"Value\":\"Content Team\"}, {\"Name\":\"Project\", \"Value\":\"#{Octopus.Project.Name}\"}, {\"Name\":\"Environment\", \"Value\":\"#{Octopus.Environment.Name}\"}], \"Time\":\"${TIMESTAMP}\",\"TimeUnit\":\"MILLISECONDS\"}" \
                        --records "[{\"MeasureName\":\"vulnerabilities\", \"MeasureValueType\":\"DOUBLE\",\"MeasureValue\":\"${COUNT}\"}]" > /dev/null   
                    
                    # Print the output stripped of ANSI colour codes
                    echo -e "${OUTPUT}" | sed 's/\x1b\[[0-9;]*m//g'
                done
                
                set_octopusvariable "VerificationResult" $SUCCESS
                
                exit 0
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "WorkerPool"

        packages "jenkins-pipeline-builder-github-backend-lambda-sbom" {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "jenkins-pipeline-builder-github-backend-lambda-sbom"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "Slack - Send Simple Notification - Bash" {
    condition = "Variable"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Action[Check for vulnerabilities].Output.VerificationResult != \"0\"}True#{/if}"
    }

    action {
        environments = ["Development (Security)", "Production (Security)"]
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-1721"
            Octopus.Action.Template.Version = "1"
            ssn_Color = "danger"
            ssn_HookUrl = "#{Slack.Hook}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "Open #{Octopus.Web.ServerUri}#{Octopus.Web.DeploymentLink} to review the logs."
            ssn_Title = "Vulnerabilities found in Jenkins Pipeline Generator"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool_variable = "WorkerPool"
    }
}