step "Create Bucket" {

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormation.Tags = "[{\"key\":\"Environment\",\"value\":\"#{Octopus.Environment.Name}\"},{\"key\":\"Deployment Project\",\"value\":\"Github Action Workflow Generator\"},{\"key\":\"Team\",\"value\":\"Content Marketing\"}]"
            Octopus.Action.Aws.CloudFormationStackName = "#{CloudFormation.BackendS3Bucket}"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                {
                  "Resources": {
                    "LambdaS3Bucket": {
                      "Type": "AWS::S3::Bucket"
                    }
                  },
                  "Outputs" : {
                    "LambdaS3Bucket" : {
                      "Description" : "The S3 Bucket",
                      "Value" : {"Ref": "LambdaS3Bucket"}
                    }
                  }
                }
            EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[]"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Upload Lambda" {

    action {
        action_type = "Octopus.AwsUploadS3"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.S3.BucketName = "#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}"
            Octopus.Action.Aws.S3.PackageOptions = "{\"bucketKey\":\"\",\"bucketKeyBehaviour\":\"Filename\",\"bucketKeyPrefix\":\"\",\"storageClass\":\"STANDARD\",\"cannedAcl\":\"private\",\"metadata\":[],\"tags\":[]}"
            Octopus.Action.Aws.S3.TargetMode = "EntirePackage"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Octopus Server (built-in)"
            Octopus.Action.Package.PackageId = "github-actions-builder-github-backend-lambda"
        }
        worker_pool_variable = "WorkerPool"

        packages {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "github-actions-builder-github-backend-lambda"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "Upload Lambda Proxy" {

    action {
        action_type = "Octopus.AwsUploadS3"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.S3.BucketName = "#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}"
            Octopus.Action.Aws.S3.PackageOptions = "{\"bucketKey\":\"\",\"bucketKeyBehaviour\":\"Filename\",\"bucketKeyPrefix\":\"\",\"storageClass\":\"STANDARD\",\"cannedAcl\":\"private\",\"metadata\":[],\"tags\":[]}"
            Octopus.Action.Aws.S3.TargetMode = "EntirePackage"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Content Team Apps"
            Octopus.Action.Package.PackageId = "com.octopus:reverse-proxy"
        }
        worker_pool_variable = "WorkerPool"

        packages {
            acquisition_location = "Server"
            feed = "Content Team Apps"
            package_id = "com.octopus:reverse-proxy"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "Get Stack Outputs" {

    action {
        action_type = "Octopus.AwsRunScript"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
            Octopus.Action.Script.ScriptBody = <<-EOT
                aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormationName.ApiGateway} \
                    --query "Stacks[0].Outputs[?OutputKey=='#{CloudFormation.Output.PipelineEndpointVariableName}'].OutputValue" \
                    --output text
                
                PIPELINE_RESOURCE_ID=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormationName.ApiGateway} \
                    --query "Stacks[0].Outputs[?OutputKey=='#{CloudFormation.Output.PipelineEndpointVariableName}'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "ApiPipelineJenkinsGenerate" ${PIPELINE_RESOURCE_ID}
                
                REST_API=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormationName.ApiGateway} \
                    --query "Stacks[0].Outputs[?OutputKey=='RestApi'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "RestApi" ${REST_API}
                
                COGNITO_POOL_ID=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormation.Cognito} \
                    --query "Stacks[0].Outputs[?OutputKey=='CognitoUserPoolID'].OutputValue" \
                    --output text)
                echo "Cognito Pool ID: ${COGNITO_POOL_ID}"
                set_octopusvariable "CognitoPoolId" ${COGNITO_POOL_ID}
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "WorkerPool"

        container {
            feed = "Dockerhub"
            image = "octopusdeploy/worker-tools:3.2.0-ubuntu.18.04"
        }
    }
}

step "Deploy Pipeline Backend" {

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormation.Tags = "[{\"key\":\"Environment\",\"value\":\"#{Octopus.Environment.Name}\"},{\"key\":\"Deployment Project\",\"value\":\"Github Action Workflow Generator\"},{\"key\":\"Team\",\"value\":\"Content Marketing\"}]"
            Octopus.Action.Aws.CloudFormationStackName = "#{CloudFormation.Backend}"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                --- 
                Outputs: 
                  DeploymentId: 
                    Description: "The deployment id"
                    Value: "Deployment#{Octopus.Deployment.Id | Replace -}"
                Parameters: 
                  AuditService: 
                    Type: String
                  CognitoAuditClientId: 
                    Type: String
                  CognitoAuditClientSecret: 
                    Type: String
                  CognitoJwk: 
                    Type: String
                  CognitoPool: 
                    Type: String
                  CognitoRegion: 
                    Type: String
                  CognitoRequiredGroup: 
                    Type: String
                  CognitoService: 
                    Type: String
                  EnvironmentName: 
                    Default: "#{Octopus.Environment.Name}"
                    Type: String
                  GithubClientId: 
                    Type: String
                  GithubClientSecret: 
                    Type: String
                  GithubEncryption: 
                    Type: String
                  GithubLoginPage: 
                    Type: String
                  GithubSalt: 
                    Type: String
                  LambdaDescription: 
                    Type: String
                  LambdaName: 
                    Type: String
                  LambdaS3Bucket: 
                    Type: String
                  LambdaS3Key: 
                    Type: String
                  ProxyLambdaS3Key: 
                    Type: String
                  ResourceId: 
                    Type: String
                  RestApi: 
                    Type: String
                  ServiceBusProxyClientId: 
                    Type: String
                  ServiceBusProxyClientSecret: 
                    Type: String
                  ServiceBusUrl: 
                    Type: String
                Resources: 
                  AppLogGroupOne: 
                    Properties: 
                      LogGroupName: "/aws/lambda/${EnvironmentName}-${LambdaName}"
                      RetentionInDays: 14
                    Type: "AWS::Logs::LogGroup"
                  AppLogGroupProxyLambda: 
                    Properties: 
                      LogGroupName: "/aws/lambda/${EnvironmentName}-${LambdaName}-Proxy"
                      RetentionInDays: 14
                    Type: "AWS::Logs::LogGroup"
                  ? "Deployment#{Octopus_Deployment.Id | Replace -}"
                  : 
                    DependsOn: 
                      - LambdaOneMethodOne
                    Properties: 
                      RestApiId: RestApi
                    Type: "AWS::ApiGateway::Deployment"
                  IamRoleLambdaOneExecution: 
                    Properties: 
                      AssumeRolePolicyDocument: 
                        Statement: 
                          - 
                            Action: 
                              - "sts:AssumeRole"
                            Effect: Allow
                            Principal: 
                              Service: 
                                - lambda.amazonaws.com
                        Version: 2012-10-17
                      Path: /
                      Policies: 
                        - 
                          PolicyDocument: 
                            Statement: 
                              - 
                                Action: 
                                  - "logs:CreateLogStream"
                                  - "logs:CreateLogGroup"
                                  - "logs:PutLogEvents"
                                Effect: Allow
                                Resource: 
                                  - "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${EnvironmentName}-${LambdaName}*:*"
                            Version: 2012-10-17
                          PolicyName: "${EnvironmentName}-${LambdaName}-policy"
                      RoleName: "${EnvironmentName}-${LambdaName}-role"
                    Type: "AWS::IAM::Role"
                  IamRoleProxyLambdaExecution: 
                    Properties: 
                      AssumeRolePolicyDocument: 
                        Statement: 
                          - 
                            Action: 
                              - "sts:AssumeRole"
                            Effect: Allow
                            Principal: 
                              Service: 
                                - lambda.amazonaws.com
                        Version: 2012-10-17
                      ManagedPolicyArns: 
                        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                      Path: /
                      Policies: 
                        - 
                          PolicyDocument: 
                            Statement: 
                              - 
                                Action: 
                                  - "logs:CreateLogStream"
                                  - "logs:CreateLogGroup"
                                  - "logs:PutLogEvents"
                                Effect: Allow
                                Resource: 
                                  - "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${EnvironmentName}-${LambdaName}-Proxy*:*"
                              - 
                                Action: 
                                  - "lambda:InvokeFunction"
                                Effect: Allow
                                Resource: 
                                  - "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${EnvironmentName}-${LambdaName}*:*"
                              - 
                                Action: 
                                  - "lambda:InvokeFunction"
                                Effect: Allow
                                Resource: 
                                  - "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${EnvironmentName}-${LambdaName}*"
                            Version: 2012-10-17
                          PolicyName: "${EnvironmentName}-${LambdaName}-Proxy-policy"
                      RoleName: "${EnvironmentName}-${LambdaName}-Proxy-role"
                    Type: "AWS::IAM::Role"
                  LambdaOne: 
                    Properties: 
                      Code: 
                        S3Bucket: LambdaS3Bucket
                        S3Key: LambdaS3Key
                      Description: LambdaDescription
                      Environment: 
                        Variables: 
                          AUDIT_SERVICE: AuditService
                          COGNITO_AUDIT_CLIENT_ID: CognitoAuditClientId
                          COGNITO_AUDIT_CLIENT_SECRET: CognitoAuditClientSecret
                          COGNITO_AZURE_SERVICE_BUS_PROXY_CLIENT_ID: ServiceBusProxyClientId
                          COGNITO_AZURE_SERVICE_BUS_PROXY_CLIENT_SECRET: ServiceBusProxyClientSecret
                          COGNITO_SERVICE: CognitoService
                          GITHUB_CLIENT_ID: GithubClientId
                          GITHUB_CLIENT_SECRET: GithubClientSecret
                          GITHUB_ENCRYPTION: GithubEncryption
                          GITHUB_LOGIN_PAGE: GithubLoginPage
                          GITHUB_SALT: GithubSalt
                          SERVICE_BUS_SERVICE: ServiceBusUrl
                      FunctionName: "${EnvironmentName}-${LambdaName}"
                      Handler: not.used.in.provided.runtime
                      MemorySize: 256
                      PackageType: Zip
                      Role: 
                        - IamRoleLambdaOneExecution
                        - Arn
                      Runtime: provided
                      Timeout: 30
                    Type: "AWS::Lambda::Function"
                  LambdaOneMethodOne: 
                    Properties: 
                      AuthorizationType: NONE
                      HttpMethod: ANY
                      Integration: 
                        IntegrationHttpMethod: POST
                        TimeoutInMillis: 20000
                        Type: AWS_PROXY
                        Uri: 
                          - ""
                          - 
                            - "arn:"
                            - "AWS::Partition"
                            - ":apigateway:"
                            - "AWS::Region"
                            - ":lambda:path/2015-03-31/functions/"
                            - 
                              - ProxyLambda
                              - Arn
                            - /invocations
                      ResourceId: ResourceId
                      RestApiId: RestApi
                    Type: "AWS::ApiGateway::Method"
                  LambdaOnePermissions: 
                    Properties: 
                      Action: "lambda:InvokeFunction"
                      FunctionName: "LambdaVersion#{Octopus.Deployment.Id | Replace -}"
                      Principal: apigateway.amazonaws.com
                      SourceArn: 
                        - ""
                        - 
                          - "arn:"
                          - "AWS::Partition"
                          - ":execute-api:"
                          - "AWS::Region"
                          - ":"
                          - "AWS::AccountId"
                          - ":"
                          - RestApi
                          - /*/*
                    Type: "AWS::Lambda::Permission"
                  ? "LambdaVersion#{Octopus_Deployment.Id | Replace -}"
                  : 
                    Properties: 
                      Description: LambdaDescription
                      FunctionName: LambdaOne
                      ProvisionedConcurrencyConfig: 
                        ProvisionedConcurrentExecutions: 20
                    Type: "AWS::Lambda::Version"
                  ProxyLambda: 
                    Properties: 
                      Code: 
                        S3Bucket: LambdaS3Bucket
                        S3Key: ProxyLambdaS3Key
                      Description: "${LambdaDescription} Proxy"
                      Environment: 
                        Variables: 
                          COGNITO_JWK: CognitoJwk
                          COGNITO_POOL: CognitoPool
                          COGNITO_REGION: CognitoRegion
                          COGNITO_REQUIRED_GROUP: CognitoRequiredGroup
                          DEFAULT_LAMBDA: "LambdaVersion#{Octopus.Deployment.Id | Replace -}"
                      FunctionName: "${EnvironmentName}-${LambdaName}-Proxy"
                      Handler: main
                      MemorySize: 128
                      PackageType: Zip
                      Role: 
                        - IamRoleProxyLambdaExecution
                        - Arn
                      Runtime: go1.x
                      Timeout: 30
                    Type: "AWS::Lambda::Function"
                  ProxyLambdaPermissions: 
                    Properties: 
                      Action: "lambda:InvokeFunction"
                      FunctionName: 
                        - ProxyLambda
                        - Arn
                      Principal: apigateway.amazonaws.com
                      SourceArn: 
                        - ""
                        - 
                          - "arn:"
                          - "AWS::Partition"
                          - ":execute-api:"
                          - "AWS::Region"
                          - ":"
                          - "AWS::AccountId"
                          - ":"
                          - RestApi
                          - /*/*
                    Type: "AWS::Lambda::Permission"
                
            EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[{\"ParameterKey\":\"AuditService\",\"ParameterValue\":\"#{ApiGateway.ContentTeamUrl}\"},{\"ParameterKey\":\"CognitoAuditClientId\",\"ParameterValue\":\"#{Cognito.AuditClientId}\"},{\"ParameterKey\":\"CognitoAuditClientSecret\",\"ParameterValue\":\"#{Cognito.AuditClientSecret}\"},{\"ParameterKey\":\"CognitoJwk\",\"ParameterValue\":\"#{Cognito.JWK}\"},{\"ParameterKey\":\"CognitoPool\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.CognitoPoolId}\"},{\"ParameterKey\":\"CognitoRegion\",\"ParameterValue\":\"#{Cognito.Region}\"},{\"ParameterKey\":\"CognitoRequiredGroup\",\"ParameterValue\":\"#{Cognito.RequiredGroup}\"},{\"ParameterKey\":\"CognitoService\",\"ParameterValue\":\"#{Cognito.Service}\"},{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"GithubClientId\",\"ParameterValue\":\"#{GitHub.GitHubAppClientId}\"},{\"ParameterKey\":\"GithubClientSecret\",\"ParameterValue\":\"#{GitHub.GitHubAppClientSecret}\"},{\"ParameterKey\":\"GithubEncryption\",\"ParameterValue\":\"#{Client.EncryptionKey}\"},{\"ParameterKey\":\"GithubLoginPage\",\"ParameterValue\":\"/oauth/github/login\"},{\"ParameterKey\":\"GithubSalt\",\"ParameterValue\":\"#{Client.EncryptionSalt}\"},{\"ParameterKey\":\"LambdaDescription\",\"ParameterValue\":\"#{Octopus.Deployment.Id} v#{Octopus.Action[Upload Lambda].Package[].PackageVersion} #{Octopus.Deployment.Id}\"},{\"ParameterKey\":\"LambdaName\",\"ParameterValue\":\"#{Lambda.Name}\"},{\"ParameterKey\":\"LambdaS3Bucket\",\"ParameterValue\":\"#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}\"},{\"ParameterKey\":\"LambdaS3Key\",\"ParameterValue\":\"#{Octopus.Action[Upload Lambda].Package[].PackageId}.#{Octopus.Action[Upload Lambda].Package[].PackageVersion}.zip\"},{\"ParameterKey\":\"ProxyLambdaS3Key\",\"ParameterValue\":\"#{Octopus.Action[Upload Lambda Proxy].Package[].PackageId}.#{Octopus.Action[Upload Lambda Proxy].Package[].PackageVersion}.zip\"},{\"ParameterKey\":\"ResourceId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.ApiPipelineJenkinsGenerate}\"},{\"ParameterKey\":\"RestApi\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"},{\"ParameterKey\":\"ServiceBusProxyClientId\",\"ParameterValue\":\"#{Cognito.ServiceBusProxyClientId}\"},{\"ParameterKey\":\"ServiceBusProxyClientSecret\",\"ParameterValue\":\"#{Cognito.ServiceBusProxyClientSecret}\"},{\"ParameterKey\":\"ServiceBusUrl\",\"ParameterValue\":\"#{ServiceBusProxy.Url}\"}]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[{\"ParameterKey\":\"AuditService\",\"ParameterValue\":\"#{ApiGateway.ContentTeamUrl}\"},{\"ParameterKey\":\"CognitoAuditClientId\",\"ParameterValue\":\"#{Cognito.AuditClientId}\"},{\"ParameterKey\":\"CognitoAuditClientSecret\",\"ParameterValue\":\"#{Cognito.AuditClientSecret}\"},{\"ParameterKey\":\"CognitoJwk\",\"ParameterValue\":\"#{Cognito.JWK}\"},{\"ParameterKey\":\"CognitoPool\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.CognitoPoolId}\"},{\"ParameterKey\":\"CognitoRegion\",\"ParameterValue\":\"#{Cognito.Region}\"},{\"ParameterKey\":\"CognitoRequiredGroup\",\"ParameterValue\":\"#{Cognito.RequiredGroup}\"},{\"ParameterKey\":\"CognitoService\",\"ParameterValue\":\"#{Cognito.Service}\"},{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"GithubClientId\",\"ParameterValue\":\"#{GitHub.GitHubAppClientId}\"},{\"ParameterKey\":\"GithubClientSecret\",\"ParameterValue\":\"#{GitHub.GitHubAppClientSecret}\"},{\"ParameterKey\":\"GithubEncryption\",\"ParameterValue\":\"#{Client.EncryptionKey}\"},{\"ParameterKey\":\"GithubLoginPage\",\"ParameterValue\":\"/oauth/github/login\"},{\"ParameterKey\":\"GithubSalt\",\"ParameterValue\":\"#{Client.EncryptionSalt}\"},{\"ParameterKey\":\"LambdaDescription\",\"ParameterValue\":\"#{Octopus.Deployment.Id} v#{Octopus.Action[Upload Lambda].Package[].PackageVersion} #{Octopus.Deployment.Id}\"},{\"ParameterKey\":\"LambdaName\",\"ParameterValue\":\"#{Lambda.Name}\"},{\"ParameterKey\":\"LambdaS3Bucket\",\"ParameterValue\":\"#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}\"},{\"ParameterKey\":\"LambdaS3Key\",\"ParameterValue\":\"#{Octopus.Action[Upload Lambda].Package[].PackageId}.#{Octopus.Action[Upload Lambda].Package[].PackageVersion}.zip\"},{\"ParameterKey\":\"ProxyLambdaS3Key\",\"ParameterValue\":\"#{Octopus.Action[Upload Lambda Proxy].Package[].PackageId}.#{Octopus.Action[Upload Lambda Proxy].Package[].PackageVersion}.zip\"},{\"ParameterKey\":\"ResourceId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.ApiPipelineJenkinsGenerate}\"},{\"ParameterKey\":\"RestApi\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"},{\"ParameterKey\":\"ServiceBusProxyClientId\",\"ParameterValue\":\"#{Cognito.ServiceBusProxyClientId}\"},{\"ParameterKey\":\"ServiceBusProxyClientSecret\",\"ParameterValue\":\"#{Cognito.ServiceBusProxyClientSecret}\"},{\"ParameterKey\":\"ServiceBusUrl\",\"ParameterValue\":\"#{ServiceBusProxy.Url}\"}]"
            Octopus.Action.Aws.IamCapabilities = "[\"CAPABILITY_AUTO_EXPAND\",\"CAPABILITY_IAM\",\"CAPABILITY_NAMED_IAM\"]"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Update Stage" {

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormationStackName = "#{CloudFormationName.ApiGatewayStage}"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                {
                  "Parameters" : {
                    "EnvironmentName" : {
                      "Type" : "String",
                      "Default" : "#{Octopus.Environment.Name}"
                    },
                    "DeploymentId" : {
                      "Type" : "String",
                      "Default" : "Deployment#{DeploymentId}"
                    },
                    "ApiGatewayId" : {
                      "Type" : "String"
                    }
                  },
                  "Resources": {
                    "Stage": {
                      "Type": "AWS::ApiGateway::Stage",
                      "Properties": {
                        "DeploymentId": {"Fn::Sub": "${DeploymentId}"},
                        "RestApiId": {"Fn::Sub": "${ApiGatewayId}"},
                        "StageName": {"Fn::Sub": "${EnvironmentName}"},
                        "Variables": {
                         	"indexPage":  {"Fn::Sub": "/${EnvironmentName}/index.html"}
                        },
                        "TracingEnabled": "True"
                      }
                    }
                  },
                  "Outputs": {
                    "StageURL": {
                      "Description": "The url of the stage",
                      "Value": {
                        "Fn::Join": [
                          "",
                          [
                            "https://",
                            {"Ref": "ApiGatewayId"},
                            ".execute-api.",
                            {
                              "Ref": "AWS::Region"
                            },
                            ".amazonaws.com/",
                            {
                              "Ref": "Stage"
                            },
                            "/"
                          ]
                        ]
                      }
                    }
                  }
                }
            EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"DeploymentId\",\"ParameterValue\":\"#{Octopus.Action[Deploy Pipeline Backend].Output.AwsOutputs[DeploymentId]}\"},{\"ParameterKey\":\"ApiGatewayId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"}]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"DeploymentId\",\"ParameterValue\":\"#{Octopus.Action[Deploy Pipeline Backend].Output.AwsOutputs[DeploymentId]}\"},{\"ParameterKey\":\"ApiGatewayId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"}]"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Get Stage URL" {

    action {
        action_type = "Octopus.AwsRunScript"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
            Octopus.Action.Script.ScriptBody = <<-EOT
                STARGE_URL=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormationName.ApiGatewayStage} \
                    --query "Stacks[0].Outputs[?OutputKey=='StageURL'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "StageURL" ${STARGE_URL}
                
                echo "Stage URL: ${STARGE_URL}"
                
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "WorkerPool"

        container {
            feed = "Dockerhub"
            image = "octopusdeploy/worker-tools:3.2.0-ubuntu.18.04"
        }
    }
}

step "HTTP - Test URL" {

    action {
        environments = ["Development", "Production"]
        properties = {
            ExpectedCode = "201"
            ExpectedResponse = "OK"
            Octopus.Action.Template.Id = "ActionTemplates-1681"
            Octopus.Action.Template.Version = "18"
            SecurityProtocol = "Tls12"
            TimeoutSeconds = "60"
            Uri = "#{Octopus.Action[Get Stage URL].Output.StageURL}/api/pipeline/github/generate?action=health"
            UseWindowsAuth = "False"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Check for vulnerabilities" {

    action {
        action_type = "Octopus.AwsRunScript"
        environments = ["Development (Security)", "Production (Security)"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "us-west-2"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS"
            Octopus.Action.Script.ScriptBody = <<-EOT
                TIMESTAMP=$(date +%s%3N)
                SUCCESS=0
                for x in **/bom.xml; do
                	# Delete any existing report file
                	if [[ -f "$PWD/depscan-bom.json" ]]; then
                      rm "$PWD/depscan-bom.json"
                    fi
                
                    # Generate the report, capturing the output, and ensuring $? is set to the exit code
                    OUTPUT=$(bash -c "docker run --rm -v \"$PWD:/app\" appthreat/dep-scan scan --bom \"/app/bom.xml\" --type bom --report_file /app/depscan.json; exit \$?" 2>&1)
                    
                    # Success is set to 1 if the exit code is not zero
                    if [[ $? -ne 0 ]]; then
                    	SUCCESS=1
                    fi
                    
                    # Report file is not generated if no threats found
                    # https://github.com/ShiftLeftSecurity/sast-scan/issues/168
                    if [[ -f "$PWD/depscan-bom.json" ]]; then
                      new_octopusartifact "$PWD/depscan-bom.json"
                      # The number of lines in the report file equals the number of vulnerabilities found
                      COUNT=$(wc -l < "$PWD/depscan-bom.json") 
                    else
                      COUNT=0
                    fi
                    
                    # Push the result to the database
                    aws timestream-write write-records \
                        --database-name octopusMetrics \
                        --table-name vulnerabilities \
                        --common-attributes "{\"Dimensions\":[{\"Name\":\"Space\", \"Value\":\"Content Team\"}, {\"Name\":\"Project\", \"Value\":\"#{Octopus.Project.Name}\"}, {\"Name\":\"Environment\", \"Value\":\"#{Octopus.Environment.Name}\"}], \"Time\":\"${TIMESTAMP}\",\"TimeUnit\":\"MILLISECONDS\"}" \
                        --records "[{\"MeasureName\":\"vulnerabilities\", \"MeasureValueType\":\"DOUBLE\",\"MeasureValue\":\"${COUNT}\"}]" > /dev/null   
                    
                    # Print the output stripped of ANSI colour codes
                    echo -e "${OUTPUT}" | sed 's/\x1b\[[0-9;]*m//g'
                done
                
                set_octopusvariable "VerificationResult" $SUCCESS
                
                exit 0
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "WorkerPool"

        packages "github-actions-builder-github-backend-lambda-sbom" {
            acquisition_location = "Server"
            feed = "Octopus Server (built-in)"
            package_id = "github-actions-builder-github-backend-lambda-sbom"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "Vulnerability Notification" {
    condition = "Variable"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Action[Check for vulnerabilities].Output.VerificationResult != \"0\"}True#{/if}"
    }

    action {
        environments = ["Development (Security)", "Production (Security)"]
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-1721"
            Octopus.Action.Template.Version = "1"
            ssn_Color = "danger"
            ssn_HookUrl = "#{Slack.Hook}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "Open #{Octopus.Web.ServerUri}#{Octopus.Web.DeploymentLink} to review the logs."
            ssn_Title = "Vulnerabilities found in Github Action Workflow Generator"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool_variable = "WorkerPool"
    }
}